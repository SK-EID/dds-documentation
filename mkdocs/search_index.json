{
    "docs": [
        {
            "location": "/", 
            "text": "AS Sertifitseerimiskeskus DigiDocService specification\n\n\nTable of contents\n\n\n\n\n\n\n\nIntroduction\n        \n\n\nFormats of digitally signed files\n        \n\n\nDDOC format\n        \n\n\nBDOC format\n       \n\n\n\n\n\n\nSigning algorithms\n        \n\n\n\n\n\n\nTerms and Acronyms\n        \n\n\nSuggestions and requirements for Application providers\n        \n\n\nDigital signing\n        \n\n\nStarting Mobile-ID operations\n        \n\n\nTechnical suggestions and requirements\n        \n\n\n\n\n\n\nMain use cases\n        \n\n\nVerification of the digitally signed file\n        \n\n\nSigning\n        \n\n\nMobile Signing in Asynchronous Client-Server mode\n        \n\n\nSigning with smartcard\n        \n\n\n\n\n\n\nAuthentication\n        \n\n\nMobile authentication in asynchronous Client-Server mode\n        \n\n\nAuthentication using smartcard\n        \n\n\n\n\n\n\n\n\n\n\nAuthentication API\n\n\nMobileAuthenticate\n\n\nGetMobileAuthenticateStatus\n\n\nCheckCertificate\n\n\n\n\n\n\nDigital Signature API\n\n\nStartSession\n\n\nHASHCODE\n\n\n\n\n\n\nCloseSession\n\n\nCreateSignedDoc\n\n\nAddDataFile\n\n\nMobileSign\n\n\nGetStatusInfo\n\n\nGetSignedDocInfo\n\n\nGetSignedDoc\n\n\nGetDataFile\n\n\nRemoveDataFile\n\n\nRemoveSignature\n\n\nGetSignersCertificate\n\n\nGetNotarysCertificate\n\n\nGetNotary\n\n\nGetVersion\n\n\nPrepareSignature\n\n\nFinalizeSignature\n\n\nMobileCreateSignature\n\n\nGetMobileCreateSignatureStatus\n\n\nGetMobileCertificate\n\n\nMobileSignHash\n\n\nGetMobileSignHashStatusRequest\n\n\n\n\n\n\nData structures\n\n\nSignedDocInfo\n\n\nCertificateInfo\n\n\nDataFileInfo\n\n\nSOAP Error Messages\n\n\nContainer validation\n\n\n\n\n\n\nService Change History\n\n\n\n\nIntroduction\n\n\nDigiDoc is a SOAP-based web service enabling an easy integration for the functionality of digital signing, verifying signatures and authentication with other information systems.\n\n\nThe service is usable in different development environments and platforms featuring SOAP 1.0-encoded support.\n\n\nFunctionality of the service:\n\n\n\n\nAuthentication with Mobile-ID\n\n\nVerification of certificate's validity (including any smartcard)\n\n\nCreation of DigiDoc/BDOC files\n\n\nDigital signing of DigiDoc/BDOC with Mobile-ID\n\n\nDigital signing of DigiDoc/BDOC with ID card (and other smartcards)\n\n\nVerification of digitally signed files (DigiDoc/BDOC) and validity of signatures\n\n\nHash signing with Mobile-ID.\n\n\n\n\nAccess to the service is created on the basis of an IP address. A contract with Sertifitseerimiskeskus needs to be signed for using the service. The price of using the DigiDocService \ndepends on the number of signature and authentication queries per month and on the number of concurrent queries coming from one application.\n\n\nDigiDocService supports DigiDoc container formats \nDIGIDOC-XML 1.3\n and \nBDOC 2.1\n with \ntime-marks\n. BDOC with \ntime-stamps\n (\nBDOC-TS\n, \nASiC-E\n) format is supported since version 3.8 for \nusing \nMobileCreateSignature\n method. Validation of BDOC-TS file format is supported starting from 3.9. Since 3.10 BDOC-TS is fully supported, i.e. support was added for following methods: \nCreateSignedDoc\n, \nAddDataFile\n, \nRemoveDataFile\n, \nRemoveSignature\n, \nPrepareSignature\n, \nFinalizeSignature\n, \nMobileSign\n.\n\n\nOlder formats (\nSK-XML 1.0\n, \nDIGIDOC-XML 1.1\n and \nDIGIDOC-XML 1.2\n) are only supported for verification (document container format is checked in the \nMobileCreateSignature\n and \nCreateSignedDoc\n methods). \nIf an inappropriate combination of given format and version number is used in request parameters, a SOAP error object with error message \"Invalid format and version combination\" will be returned.\n\n\nFormats of digitally signed files\n\n\nDDOC format\n\n\nThe format of the digitally signed file is based on ETSI TS 101 903 standard called \"XML Advanced Electronic Signatures (XAdES)\". This standard provides syntax for digital \nsignatures with various levels of additional validity information.\n\n\nIn order to comply with the security model described above, the XAdES profile of \"XAdES-X-L\" is used in the DigiDoc system but \"time-marks\" are used i\nnstead of \"time-stamps\" \u2013 signing (and certificate validation) time comes with OCSP response.\n\n\nThis profile:\n\n\n\n\nAllows for incorporating following signed properties\n\n\nCertificate used for signing\n\n\nSigning time\n\n\nSignature production place\n\n\nSigner role or resolution\n\n\n\n\n\n\nIncorporates full certificate validity information within the signature\n\n\nOCSP response\n\n\nOCSP responder certificate\n\n\n\n\n\n\n\n\nAs of result, it is possible to verify signature validity without any additional external information \u2013 the verifier should trust the issuer of signer's certificate and a OCSP responder certificate.\n\n\n\n\nOriginal files (which were signed) along with the signature(s), validation confirmation(s) and certificates are encapsulated within container with \"SignedDoc\" being as a root element.\n\n\nDigiDoc system uses file extension. \nddoc\n to distinguish digitally signed files according to the described file format.\n\n\nSyntax of the \n.ddoc\n files is described in the separate document [3] DigiDoc Format Specification in detail.\n\n\nBDOC format\n\n\nIn addition starting from version 3.5 DigiDocService also supports BDOC 2.1 \nwith__time-marks\n (BDOC-TM). BDOC \nwith time-stamps\n (BDOC-TS, ASiC-E) format is supported since version 3.8 for using MobileCreateSignature method. Validation of BDOC-TS container format is supported starting from 3.9 and since 3.10 BDOC-TS is fully supported, i.e. added support for following methods: CreateSignedDoc, AddDataFile, RemoveDataFile, PrepareSignature, FinalizeSignature, MobileSign, RemoveSignature.\n\n\nThe description of BDOC file format is available in BDOC specification [9].\n\n\nStarting from 2015 BDOC is default digital signature format in Estonia, therefore it's important to add BDOC file format support to your service. For more information about BDOC file format, please visit \nhttp://www.id.ee/?id=34336\n\n\nInstructions for DigiDocService service users on how to migrate to BDOC format are available at id.ee website: \nhttp://www.id.ee/?lang=en\nid=37072\n .\n\n\nSigning algorithms\n\n\nDigiDocService supports signatures using the ECDSA (Elliptic Curve Digital Signature Algorithm) and RSA algorithms.\n\n\nThe service automatically chooses the appropriate algorithms for signing and authentication. To learn which algorithm is \nused in a particular case, application providers should inspect the certificate returned by the service.\n\n\nECDSA is currently only supported for Mobile-ID. If user's SIM card does not have ECDSA support, RSA algorithm is used. \nFor DDOC file format only RSA is supported, BDOC format supports RSA and ECDSA.\n\n\nA single signer can have multiple active certificates, each with a different signing algorithm. In such cases, \nDigiDocService chooses the most suitable certificate automatically.\n\n\nThe choice is based on following conditions:\n\n\n\n\nif user's SIM-card supports ECDSA, authentication (operation MobileAuthenticate) is always done using the ECDSA certificate.\n\n\nIf user's SIM-card supports ECDSA and RSA, then ECDSA is used for signing BDOC files (operation MobileSign and MobileCreateSignature). As the DDOC file format does not support ECDSA, DDOC files are always signed using RSA.\n\n\n\n\nFor SIM cards that support both ECDSA and RSA the GetMobileCertificate method \nby\n default\n returns the ECDSA certificate; similarly, the MobileSignHash method chooses ECDSA. But starting from version 3.9 it is possible to request ECDSA (ECC) or RSA certificate.\n\n\nRSA is commonly used with either 1024-bit or 2048-bit keys. ECDSA is implemented over the NIST P-256 [8] curve and the signatures are encoded according to the XMLDSig specification [10] (i.e., two 256-bit integers appended to each other, zero-padded on the left if necessary; the result is then converted to Base64). The total raw ECDSA signature size is always 512 bits.\n\n\nTerms and Acronyms\n\n\n\n\nApplication Provider\n - Client of the DigiDocService, provides an application that uses digital signing, signature verification and/or authentication. \n\n\nControl Code\n - 4-digit number used in mobile authentication and mobile signing which is cryptographically linked with hash value to be signed. Control Code is displayed both in mobile phone and computer application in order to provide for authenticity of the signing request. \n\n\nHash, Hash value\n - Data to be signed which is cryptographically derived from Datafiles and other parameters to be signed \n\n\nMobile-ID\n - Service based on Wireless PKI providing for mobile authentication and digital signing. Mobile-ID user uses special SIM card with private keys on it. Hash to be signed is sent over the mobile network to the phone and the user shall enter PIN code to perform transaction. The signed result is sent back to the service. \n\n\nMSSP\n - Mobile Signature Service Provider. Described in standard ETSI TS 102 204 [6]. \n\n\nOriginal file, Datafile\n - File to be digitally signed. The file is in arbitrary file format \n\n\nSigning\n - Used in this case as \u201eforming the digital signature\" according to the Digital Signature Law. The procedure includes besides signing the validity confirmation request. \n\n\nVerification\n - Checking the validity of signatures of the digitally signed data. \n\n\nTransaction, session\n - Communication while a file (DigiDoc or the original data file) is forwarded to the web service and some operations related to these are followed, i.e. a DigiDoc is created out of the data file, then signed and returned to the application. After closing the transaction all the information created during the transaction is deleted from the service-server |\n\n\n\n\nMain use cases\n\n\nVerification of the digitally signed file\n\n\nIn need of verifying a digitally signed document the easiest way is to use the StartSession request (described in \nStartSession\n) valuing the SigDocXML parameter. If the only purpose is getting the overview of the content of DigiDoc and no further signing or certificate reading is intended, the StartSession request should be called with the parameter bHoldSession value set to false. In this case no further session closing is necessary. The StartSession request returns the signed document information as a structure of SignedDocInfo, where all the necessary parameters the signed document are readable.\n\n\n\n\nIf StartSession is called with parameter bHoldSession=true, after verifying it some additional requests about signed document will be possible:\n\n\n\n\n\n\nto request the information about a data file (GetDataFile method)\n\n\n\n\n\n\nto request the certificate of a certain signer (GetSignerCertificate method)\n\n\n\n\n\n\nto request the validity confirmation response for a certain signature (GetNotary method)\n\n\n\n\n\n\n-to request the validity confirmation signer's certificate of a certain signature (GetNotaryCertificate method)\n\n\nIf StartSession is called with parameter bHoldSession=true, further session closing will be necessary.\n\n\n\n\nSigning\n\n\nMobile Signing in Asynchronous Client-Server mode\n\n\n\n\n\n\nApplication provider sends the files for signing (DigiDoc files or original files) to DigiDoc Service within the StartSession request.\n\n\nAs a result of the StartSession request also a created session identifier is returned, what should be used in the headers of following requests.\n\n\nThe application sends a MobileSign request to start the signing process. If there's a will to sign more than one original file at a time, it's possible to add additional data files with AddDataFile method before sending the MobileSign request.\n\n\nDigiDocService forwards the signing request to MSSP service, which forwards it in turn to user's phone via a mobile operator.\n\n\nMSSP returns either an errorcode or an information about successful request.\n\n\nDigiDocService returns a response to the application with the MobileSign request. The response is either an errorcode or the information about the signing request.\n\n\nIn asynchronous Client-Server mode the application should keep up sending a GetStatusInfo request to DigiDocService until signing process is either successful or unsuccessful.\n\n\nMSSP service sends a note about succeeding/unsucceeding. If signing is successful, also a signature will be sent to the DigiDocService.\n\n\nDigiDocService returns the information about receiving the signature to MSSP.\n\n\nAfter receiving the signature DigiDoc service sends a request about the user certificate's validity to the OCSP validity confirmation service.\n\n\nThe validity confirmation service returns a signed validity confirmation response. A signature, which contains a signed hash and the validity confirmation service response is added to the DigiDoc file in session.\n\n\nAnother GetSignedDocInfo request is sent by the Application Provider.\n\n\nDigiDocService returns GetStatusInfoResponse about success or failure of signing operation\n\n\nApplication provider request information about document status using GetSignedDocInfo method\n\n\nDigiDocService responds to GetSignedDocInfo\n\n\nThe application provider inquires the content of the signed DigiDoc with GetSignedDoc request.\n\n\nDigiDocService returns a DigiDoc file to the application. If the content of the data files is not sent to the service within the StartSession, the application that uses the service has to add it to the DigiDoc container itself.\n\n\nThe application closes the session with sending a CloseSession request to the service.\n\n\nThe Service returns the CloseSession response.\n\n\n\n\nSigning with smartcard\n\n\nThe present example is based on the web-page enabling digital signing.\n\n\n\n\n\n\nUser of the digital signing application has chosen a procedure that requires data signing. The user starts the signing procedure pressing the respective button or hyperlink in a company web service.\n\n\nThe data meant to be signed will be sent to DigiDocService by StartSession request. A new session is initiated with that. Every session is connected to a (digitally signed) document. But every digitally signed document may contain plenty of original files.\n\n\n\n\nAn application sends to the service either\n\n\n\n\na file to be signed\n\n\nthe meta information and the hash of the file to be signed (the content of the file has been removed)\n\n\nthe entire container to be signed\n\n\nthe container to be signed without the bodi(es) of datafile(s) (all the content between the DataFile tags has been removed)\n\n\n\n\nThe ways of sending the data necessary for signing are described more precisely in \nStartSession\n. Data received within the StartSession request is saved in the session.\n\n\n\n\nSessionCode is returned to the application, what enables the following procedures with the session data.\n\n\nBefore signing the application may add supplementary data files (AddDataFile request) or remove some datafiles (RemoveDataFile request) or carry out some other procedures with session data.\n\n\nAfter procedures the current session document information is returned.\n\n\nThe signing modules are integrated in the webpage which offers digital signing. Also some information about the signer's role/resolution and the signing location may be asked the user on the webpage. The signing component located on the webpage reads the signer's certificate information from the smartcard. It is recommended to use Javascript library idCard.js for loading signature modules - available from \nid.ee\n\n\nThe certificate from the signer's smartcard together with other user inserted signature attributes is forwarded to the signing web-server.\n\n\nSignature parameters are forwarded to DigiDocService with PrepareSignature request.\n\n\nDigiDocService adds new signature information to the session document \u2013 signer's certificate and signature parameters and calculates the hash, what should be signed by the signer. The signed hash is sent to the application provider in PrepareSignature response.\n\n\nThe hash to be signed together with the signing module is displayed to a user. The user presses the signing button on the webpage. As the result of that the signing module signs the hash (also asks for the PIN-code).\n\n\n\n\nThe created signature is set to the hidden field of the form and sent to the web-page which offers the signing functionality.\n\n\n\n\nThe signature is forwarded to the signing web-server (application provider).\n\n\nThe signature is forwarded to DigiDocService with FinalizeSignature request.\n\n\nDigiSocService makes a validity confirmation request about the validity of the signer's certificate to the OCSP validity service.\n\n\nOCSP validity confirmation server returns the validity confirmation of the signature.\n\n\nIf the confirmation is positive (i.e. the signer's certificate is valid), SK web-service adds the entire information (the signature and the validity \n   confirmation of the signer) to the creatable digital signature. From now on the digital signature is consistent added to the DigiDoc in session. \n   DigiDocService returns the digital signing application the SignedDocInfo.\n\n\nApplication asks for the content of the DigiDoc file with GetSignedDoc request.\n\n\nDigiDocService returns the current DigiDoc document which also contains the added signature.\n\n\nThe user is informed about the happy end in digital signing. A digitally signed DigiDoc file is ready for download.\n\n\n\n\nNB! In case that the content of the data file was not sent to servers within StartSession and AddDataFile requests (described in options b and d), it's necessary to add the bodies of data files to DigiDoc file received from the service. TheContentType has to be changed in \n tag, the reference to hash has to be removed and the contents of data files in Base64 encoding has to be added between \n tags. If possible the validity of signatures and the integrity of file is checked.\n\n\n\n\nThe last step for the signing application is to close the session with CloseSession request. After that the service deletes all the data saved within the session.\n\n\n\n\nAuthentication\n\n\nMobile authentication in asynchronous Client-Server mode\n\n\n\n\n\n\nThe Application Provider sends data required for the authentication to DigiDocService using MobileAutheticate (personal identification code, text to be displayed, language)\n\n\nDigiDocService makes a validity confirmation request about the validity of the user's certificate to the OCSP service.\n\n\nOCSP validity confirmation server returns the validity confirmation of the certificate. If the certificate is valid, go to p. 4, otherwise to p. 6.\n\n\nAn authentication request is sent to the user's mobile phone through the MSSP service.\n\n\nMSSP responses with information about successfulness of message delivery to the mobile phone\n\n\nIf the certificate was valid and delivery of the authentication message through MSSP was successful, information about the end-user is returned to the Application provider. Otherwise, error message is returned.\n\n\nApplication Provider will periodically query the Service with GetMobileAuthenticateStatus request. (Note: this is a case for Asynchronous Client-Server Mode; in other mode the Application Provider will just wait for information from the Service).\n\n\nDigiDocService in turn will query MSSP\n\n\nMSSP responses on status of the query\n\n\nInformation about authentication status is forwarded to the Application Provider.\n\n\n\n\n\n\n14 etc - this loop (7. 8. 9. 10.) goes on until positive answer or error message will arrive.\n\n\n\n\n\n\n\n\nAuthentication using smartcard\n\n\nCheckCertificate method can be used as a part of authentication with ID-card, checking the validity of user authentication certificate (located on the smartcard).\n\n\nSuggestions and requirements for Application providers\n\n\nDigital signing\n\n\nApplication provider shall guarantee the following:\n\n\n\n\nAccording to the Digital Signature Act passed in the Estonian parliament, a digital signature solution must make it possible to:\n1) unambiguously identify the person who owns the signing certificate;\n\n\n\n\n2) identify the time of signing;\n\n\n3) connect the digital signature with the signed data in a way that makes it impossible to undetectably change the signed data or its meaning after signing.\n\n\n\n\nThe user is informed about the legal consequences of the digital signature before entering PIN2 (i.e., the PIN used for digital signatures).\n\n\nMeasures are implemented to guarantee a single interpretation of signed data.\n\n\nThe user shall have the possibility to be sure in the authenticity of the signed data and the attributes added to the signature (place of signing, role/resolution) should they be used.\n\n\nThe data presented to the user before signing is in compliance with the actual data to be signed.\n\n\nThe user shall have access to the digitally signed file which is created after the digital signing. Note that this applies to any operation that uses PIN2.  For example, when signing online payments on a web site, the signer must be allowed to access the signed container after signing. This allows the signer to verify contents of the signed data.\n\n\n\n\nStarting Mobile-ID operations\n\n\nMobile-ID operations (mobile authentication and mobile signing) can be started using DigiDocService methods:\n\n\n\n\nMobileAuthenticate,\n\n\nMobileSign and\n\n\nMobileCreateSignature \n\n\n\n\nAll those methods accept Mobile-ID user's Personal Identification Code and phone number as input parameter.\n\n\nIf you would like to provide Mobile-ID operations for Lithuanian Mobile-ID users in your application then both input parameters are mandatory: user's Personal Identification Code and phone number. Otherwise the request fails.\n\n\n\n\nNB!\n It is highly recommended to use both input parameters - Mobile-ID user's Personal Identification Code and phone number also for \nEstonian Mobile-ID users. The requirement is planned to be turned obligatory in the future.\n\n\n\n\nUsing only phone number is not recommended when security is a concern, because phone numbers are public and Mobile-ID users may get spammed.\n\n\nUsing both Personal Identification Code and phone number:\n\n\n\n\nWhen user makes a mistake when entering either his/her Personal Identification Code or phone number, it's very unlikely that Mobile-ID request will appear in another unintended Mobile-ID user's phone.\n\n\nSpamming is complicated because Personal Identification Codes are not public\n\n\nThe user does not necessarily have to enter such data directly: for example, a user name could be tied to a particular combination of personal identification code and a phone number.\n\n\n\n\nIt's mandatory for application providers to prevent spamming (by IP-restrictions or by using input parameters mentioned above), otherwise AS Sertifitseerimiskeskus must limit access to DigiDocService, to guarantee that DigiDocService stays up and running for other application providers that use it.\n\n\nApplication, that enables users to authenticate or digitally sign documents using Mobile-ID, must clearly present challenge number (ChallengeID parameter in MobileAuthenticate response, see below) to user and warn user to check if challenge number presented by application is the same as challenge number on mobile phone screen. If challenge numbers differ, Mobile-ID operation has to be cancelled.\n\n\nChallenge number should be correctly implemented and highly visible also when Mobile-ID operations are used from Mobile device browser.\n\n\nTechnical suggestions and requirements\n\n\n\n\nWeb applications, that enable authentication or digital signing using Mobile-ID or ID-card, should use encrypted channel (HTTPS) between browser and web server.\n\n\nMobile-ID-enabled web applications, when polling regularly DigiDocService with requests about operation state information (whether user has already entered his/her PIN number and signing/authenticating is completed or not), should, for usability reasons, not reload web page every time request is made to DigiDocService \u2013 using Ajax is recommended.\n\n\nThe file size is limited to 4 MB. \nStartSession\n describes how to send larger-scale files to the Service.\n\n\n\n\nService Change History\n\n\nService changes' history can be found at \nhttp://www.id.ee/?lang=en\nid=36458\n\n\n\n\nInformation about canonic XML: \nhttp://www.w3.org/TR/xml-c14n", 
            "title": "Overview"
        }, 
        {
            "location": "/#as-sertifitseerimiskeskus-digidocservice-specification", 
            "text": "", 
            "title": "AS Sertifitseerimiskeskus DigiDocService specification"
        }, 
        {
            "location": "/#table-of-contents", 
            "text": "Introduction           Formats of digitally signed files           DDOC format           BDOC format            Signing algorithms             Terms and Acronyms           Suggestions and requirements for Application providers           Digital signing           Starting Mobile-ID operations           Technical suggestions and requirements             Main use cases           Verification of the digitally signed file           Signing           Mobile Signing in Asynchronous Client-Server mode           Signing with smartcard             Authentication           Mobile authentication in asynchronous Client-Server mode           Authentication using smartcard               Authentication API  MobileAuthenticate  GetMobileAuthenticateStatus  CheckCertificate    Digital Signature API  StartSession  HASHCODE    CloseSession  CreateSignedDoc  AddDataFile  MobileSign  GetStatusInfo  GetSignedDocInfo  GetSignedDoc  GetDataFile  RemoveDataFile  RemoveSignature  GetSignersCertificate  GetNotarysCertificate  GetNotary  GetVersion  PrepareSignature  FinalizeSignature  MobileCreateSignature  GetMobileCreateSignatureStatus  GetMobileCertificate  MobileSignHash  GetMobileSignHashStatusRequest    Data structures  SignedDocInfo  CertificateInfo  DataFileInfo  SOAP Error Messages  Container validation    Service Change History", 
            "title": "Table of contents"
        }, 
        {
            "location": "/#introduction", 
            "text": "DigiDoc is a SOAP-based web service enabling an easy integration for the functionality of digital signing, verifying signatures and authentication with other information systems.  The service is usable in different development environments and platforms featuring SOAP 1.0-encoded support.  Functionality of the service:   Authentication with Mobile-ID  Verification of certificate's validity (including any smartcard)  Creation of DigiDoc/BDOC files  Digital signing of DigiDoc/BDOC with Mobile-ID  Digital signing of DigiDoc/BDOC with ID card (and other smartcards)  Verification of digitally signed files (DigiDoc/BDOC) and validity of signatures  Hash signing with Mobile-ID.   Access to the service is created on the basis of an IP address. A contract with Sertifitseerimiskeskus needs to be signed for using the service. The price of using the DigiDocService \ndepends on the number of signature and authentication queries per month and on the number of concurrent queries coming from one application.  DigiDocService supports DigiDoc container formats  DIGIDOC-XML 1.3  and  BDOC 2.1  with  time-marks . BDOC with  time-stamps  ( BDOC-TS ,  ASiC-E ) format is supported since version 3.8 for \nusing  MobileCreateSignature  method. Validation of BDOC-TS file format is supported starting from 3.9. Since 3.10 BDOC-TS is fully supported, i.e. support was added for following methods:  CreateSignedDoc ,  AddDataFile ,  RemoveDataFile ,  RemoveSignature ,  PrepareSignature ,  FinalizeSignature ,  MobileSign .  Older formats ( SK-XML 1.0 ,  DIGIDOC-XML 1.1  and  DIGIDOC-XML 1.2 ) are only supported for verification (document container format is checked in the  MobileCreateSignature  and  CreateSignedDoc  methods). \nIf an inappropriate combination of given format and version number is used in request parameters, a SOAP error object with error message \"Invalid format and version combination\" will be returned.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#formats-of-digitally-signed-files", 
            "text": "", 
            "title": "Formats of digitally signed files"
        }, 
        {
            "location": "/#ddoc-format", 
            "text": "The format of the digitally signed file is based on ETSI TS 101 903 standard called \"XML Advanced Electronic Signatures (XAdES)\". This standard provides syntax for digital \nsignatures with various levels of additional validity information.  In order to comply with the security model described above, the XAdES profile of \"XAdES-X-L\" is used in the DigiDoc system but \"time-marks\" are used i\nnstead of \"time-stamps\" \u2013 signing (and certificate validation) time comes with OCSP response.  This profile:   Allows for incorporating following signed properties  Certificate used for signing  Signing time  Signature production place  Signer role or resolution    Incorporates full certificate validity information within the signature  OCSP response  OCSP responder certificate     As of result, it is possible to verify signature validity without any additional external information \u2013 the verifier should trust the issuer of signer's certificate and a OCSP responder certificate.   Original files (which were signed) along with the signature(s), validation confirmation(s) and certificates are encapsulated within container with \"SignedDoc\" being as a root element.  DigiDoc system uses file extension.  ddoc  to distinguish digitally signed files according to the described file format.  Syntax of the  .ddoc  files is described in the separate document [3] DigiDoc Format Specification in detail.", 
            "title": "DDOC format"
        }, 
        {
            "location": "/#bdoc-format", 
            "text": "In addition starting from version 3.5 DigiDocService also supports BDOC 2.1  with__time-marks  (BDOC-TM). BDOC  with time-stamps  (BDOC-TS, ASiC-E) format is supported since version 3.8 for using MobileCreateSignature method. Validation of BDOC-TS container format is supported starting from 3.9 and since 3.10 BDOC-TS is fully supported, i.e. added support for following methods: CreateSignedDoc, AddDataFile, RemoveDataFile, PrepareSignature, FinalizeSignature, MobileSign, RemoveSignature.  The description of BDOC file format is available in BDOC specification [9].  Starting from 2015 BDOC is default digital signature format in Estonia, therefore it's important to add BDOC file format support to your service. For more information about BDOC file format, please visit  http://www.id.ee/?id=34336  Instructions for DigiDocService service users on how to migrate to BDOC format are available at id.ee website:  http://www.id.ee/?lang=en id=37072  .", 
            "title": "BDOC format"
        }, 
        {
            "location": "/#signing-algorithms", 
            "text": "DigiDocService supports signatures using the ECDSA (Elliptic Curve Digital Signature Algorithm) and RSA algorithms.  The service automatically chooses the appropriate algorithms for signing and authentication. To learn which algorithm is \nused in a particular case, application providers should inspect the certificate returned by the service.  ECDSA is currently only supported for Mobile-ID. If user's SIM card does not have ECDSA support, RSA algorithm is used. \nFor DDOC file format only RSA is supported, BDOC format supports RSA and ECDSA.  A single signer can have multiple active certificates, each with a different signing algorithm. In such cases, \nDigiDocService chooses the most suitable certificate automatically.  The choice is based on following conditions:   if user's SIM-card supports ECDSA, authentication (operation MobileAuthenticate) is always done using the ECDSA certificate.  If user's SIM-card supports ECDSA and RSA, then ECDSA is used for signing BDOC files (operation MobileSign and MobileCreateSignature). As the DDOC file format does not support ECDSA, DDOC files are always signed using RSA.   For SIM cards that support both ECDSA and RSA the GetMobileCertificate method  by  default  returns the ECDSA certificate; similarly, the MobileSignHash method chooses ECDSA. But starting from version 3.9 it is possible to request ECDSA (ECC) or RSA certificate.  RSA is commonly used with either 1024-bit or 2048-bit keys. ECDSA is implemented over the NIST P-256 [8] curve and the signatures are encoded according to the XMLDSig specification [10] (i.e., two 256-bit integers appended to each other, zero-padded on the left if necessary; the result is then converted to Base64). The total raw ECDSA signature size is always 512 bits.", 
            "title": "Signing algorithms"
        }, 
        {
            "location": "/#terms-and-acronyms", 
            "text": "Application Provider  - Client of the DigiDocService, provides an application that uses digital signing, signature verification and/or authentication.   Control Code  - 4-digit number used in mobile authentication and mobile signing which is cryptographically linked with hash value to be signed. Control Code is displayed both in mobile phone and computer application in order to provide for authenticity of the signing request.   Hash, Hash value  - Data to be signed which is cryptographically derived from Datafiles and other parameters to be signed   Mobile-ID  - Service based on Wireless PKI providing for mobile authentication and digital signing. Mobile-ID user uses special SIM card with private keys on it. Hash to be signed is sent over the mobile network to the phone and the user shall enter PIN code to perform transaction. The signed result is sent back to the service.   MSSP  - Mobile Signature Service Provider. Described in standard ETSI TS 102 204 [6].   Original file, Datafile  - File to be digitally signed. The file is in arbitrary file format   Signing  - Used in this case as \u201eforming the digital signature\" according to the Digital Signature Law. The procedure includes besides signing the validity confirmation request.   Verification  - Checking the validity of signatures of the digitally signed data.   Transaction, session  - Communication while a file (DigiDoc or the original data file) is forwarded to the web service and some operations related to these are followed, i.e. a DigiDoc is created out of the data file, then signed and returned to the application. After closing the transaction all the information created during the transaction is deleted from the service-server |", 
            "title": "Terms and Acronyms"
        }, 
        {
            "location": "/#main-use-cases", 
            "text": "", 
            "title": "Main use cases"
        }, 
        {
            "location": "/#verification-of-the-digitally-signed-file", 
            "text": "In need of verifying a digitally signed document the easiest way is to use the StartSession request (described in  StartSession ) valuing the SigDocXML parameter. If the only purpose is getting the overview of the content of DigiDoc and no further signing or certificate reading is intended, the StartSession request should be called with the parameter bHoldSession value set to false. In this case no further session closing is necessary. The StartSession request returns the signed document information as a structure of SignedDocInfo, where all the necessary parameters the signed document are readable.   If StartSession is called with parameter bHoldSession=true, after verifying it some additional requests about signed document will be possible:    to request the information about a data file (GetDataFile method)    to request the certificate of a certain signer (GetSignerCertificate method)    to request the validity confirmation response for a certain signature (GetNotary method)    -to request the validity confirmation signer's certificate of a certain signature (GetNotaryCertificate method)  If StartSession is called with parameter bHoldSession=true, further session closing will be necessary.", 
            "title": "Verification of the digitally signed file"
        }, 
        {
            "location": "/#signing", 
            "text": "", 
            "title": "Signing"
        }, 
        {
            "location": "/#mobile-signing-in-asynchronous-client-server-mode", 
            "text": "Application provider sends the files for signing (DigiDoc files or original files) to DigiDoc Service within the StartSession request.  As a result of the StartSession request also a created session identifier is returned, what should be used in the headers of following requests.  The application sends a MobileSign request to start the signing process. If there's a will to sign more than one original file at a time, it's possible to add additional data files with AddDataFile method before sending the MobileSign request.  DigiDocService forwards the signing request to MSSP service, which forwards it in turn to user's phone via a mobile operator.  MSSP returns either an errorcode or an information about successful request.  DigiDocService returns a response to the application with the MobileSign request. The response is either an errorcode or the information about the signing request.  In asynchronous Client-Server mode the application should keep up sending a GetStatusInfo request to DigiDocService until signing process is either successful or unsuccessful.  MSSP service sends a note about succeeding/unsucceeding. If signing is successful, also a signature will be sent to the DigiDocService.  DigiDocService returns the information about receiving the signature to MSSP.  After receiving the signature DigiDoc service sends a request about the user certificate's validity to the OCSP validity confirmation service.  The validity confirmation service returns a signed validity confirmation response. A signature, which contains a signed hash and the validity confirmation service response is added to the DigiDoc file in session.  Another GetSignedDocInfo request is sent by the Application Provider.  DigiDocService returns GetStatusInfoResponse about success or failure of signing operation  Application provider request information about document status using GetSignedDocInfo method  DigiDocService responds to GetSignedDocInfo  The application provider inquires the content of the signed DigiDoc with GetSignedDoc request.  DigiDocService returns a DigiDoc file to the application. If the content of the data files is not sent to the service within the StartSession, the application that uses the service has to add it to the DigiDoc container itself.  The application closes the session with sending a CloseSession request to the service.  The Service returns the CloseSession response.", 
            "title": "Mobile Signing in Asynchronous Client-Server mode"
        }, 
        {
            "location": "/#signing-with-smartcard", 
            "text": "The present example is based on the web-page enabling digital signing.    User of the digital signing application has chosen a procedure that requires data signing. The user starts the signing procedure pressing the respective button or hyperlink in a company web service.  The data meant to be signed will be sent to DigiDocService by StartSession request. A new session is initiated with that. Every session is connected to a (digitally signed) document. But every digitally signed document may contain plenty of original files.   An application sends to the service either   a file to be signed  the meta information and the hash of the file to be signed (the content of the file has been removed)  the entire container to be signed  the container to be signed without the bodi(es) of datafile(s) (all the content between the DataFile tags has been removed)   The ways of sending the data necessary for signing are described more precisely in  StartSession . Data received within the StartSession request is saved in the session.   SessionCode is returned to the application, what enables the following procedures with the session data.  Before signing the application may add supplementary data files (AddDataFile request) or remove some datafiles (RemoveDataFile request) or carry out some other procedures with session data.  After procedures the current session document information is returned.  The signing modules are integrated in the webpage which offers digital signing. Also some information about the signer's role/resolution and the signing location may be asked the user on the webpage. The signing component located on the webpage reads the signer's certificate information from the smartcard. It is recommended to use Javascript library idCard.js for loading signature modules - available from  id.ee  The certificate from the signer's smartcard together with other user inserted signature attributes is forwarded to the signing web-server.  Signature parameters are forwarded to DigiDocService with PrepareSignature request.  DigiDocService adds new signature information to the session document \u2013 signer's certificate and signature parameters and calculates the hash, what should be signed by the signer. The signed hash is sent to the application provider in PrepareSignature response.  The hash to be signed together with the signing module is displayed to a user. The user presses the signing button on the webpage. As the result of that the signing module signs the hash (also asks for the PIN-code).   The created signature is set to the hidden field of the form and sent to the web-page which offers the signing functionality.   The signature is forwarded to the signing web-server (application provider).  The signature is forwarded to DigiDocService with FinalizeSignature request.  DigiSocService makes a validity confirmation request about the validity of the signer's certificate to the OCSP validity service.  OCSP validity confirmation server returns the validity confirmation of the signature.  If the confirmation is positive (i.e. the signer's certificate is valid), SK web-service adds the entire information (the signature and the validity \n   confirmation of the signer) to the creatable digital signature. From now on the digital signature is consistent added to the DigiDoc in session. \n   DigiDocService returns the digital signing application the SignedDocInfo.  Application asks for the content of the DigiDoc file with GetSignedDoc request.  DigiDocService returns the current DigiDoc document which also contains the added signature.  The user is informed about the happy end in digital signing. A digitally signed DigiDoc file is ready for download.   NB! In case that the content of the data file was not sent to servers within StartSession and AddDataFile requests (described in options b and d), it's necessary to add the bodies of data files to DigiDoc file received from the service. TheContentType has to be changed in   tag, the reference to hash has to be removed and the contents of data files in Base64 encoding has to be added between   tags. If possible the validity of signatures and the integrity of file is checked.   The last step for the signing application is to close the session with CloseSession request. After that the service deletes all the data saved within the session.", 
            "title": "Signing with smartcard"
        }, 
        {
            "location": "/#authentication", 
            "text": "", 
            "title": "Authentication"
        }, 
        {
            "location": "/#mobile-authentication-in-asynchronous-client-server-mode", 
            "text": "The Application Provider sends data required for the authentication to DigiDocService using MobileAutheticate (personal identification code, text to be displayed, language)  DigiDocService makes a validity confirmation request about the validity of the user's certificate to the OCSP service.  OCSP validity confirmation server returns the validity confirmation of the certificate. If the certificate is valid, go to p. 4, otherwise to p. 6.  An authentication request is sent to the user's mobile phone through the MSSP service.  MSSP responses with information about successfulness of message delivery to the mobile phone  If the certificate was valid and delivery of the authentication message through MSSP was successful, information about the end-user is returned to the Application provider. Otherwise, error message is returned.  Application Provider will periodically query the Service with GetMobileAuthenticateStatus request. (Note: this is a case for Asynchronous Client-Server Mode; in other mode the Application Provider will just wait for information from the Service).  DigiDocService in turn will query MSSP  MSSP responses on status of the query  Information about authentication status is forwarded to the Application Provider.    14 etc - this loop (7. 8. 9. 10.) goes on until positive answer or error message will arrive.", 
            "title": "Mobile authentication in asynchronous Client-Server mode"
        }, 
        {
            "location": "/#authentication-using-smartcard", 
            "text": "CheckCertificate method can be used as a part of authentication with ID-card, checking the validity of user authentication certificate (located on the smartcard).", 
            "title": "Authentication using smartcard"
        }, 
        {
            "location": "/#suggestions-and-requirements-for-application-providers", 
            "text": "", 
            "title": "Suggestions and requirements for Application providers"
        }, 
        {
            "location": "/#digital-signing", 
            "text": "Application provider shall guarantee the following:   According to the Digital Signature Act passed in the Estonian parliament, a digital signature solution must make it possible to:\n1) unambiguously identify the person who owns the signing certificate;   2) identify the time of signing;  3) connect the digital signature with the signed data in a way that makes it impossible to undetectably change the signed data or its meaning after signing.   The user is informed about the legal consequences of the digital signature before entering PIN2 (i.e., the PIN used for digital signatures).  Measures are implemented to guarantee a single interpretation of signed data.  The user shall have the possibility to be sure in the authenticity of the signed data and the attributes added to the signature (place of signing, role/resolution) should they be used.  The data presented to the user before signing is in compliance with the actual data to be signed.  The user shall have access to the digitally signed file which is created after the digital signing. Note that this applies to any operation that uses PIN2.  For example, when signing online payments on a web site, the signer must be allowed to access the signed container after signing. This allows the signer to verify contents of the signed data.", 
            "title": "Digital signing"
        }, 
        {
            "location": "/#starting-mobile-id-operations", 
            "text": "Mobile-ID operations (mobile authentication and mobile signing) can be started using DigiDocService methods:   MobileAuthenticate,  MobileSign and  MobileCreateSignature    All those methods accept Mobile-ID user's Personal Identification Code and phone number as input parameter.  If you would like to provide Mobile-ID operations for Lithuanian Mobile-ID users in your application then both input parameters are mandatory: user's Personal Identification Code and phone number. Otherwise the request fails.   NB!  It is highly recommended to use both input parameters - Mobile-ID user's Personal Identification Code and phone number also for \nEstonian Mobile-ID users. The requirement is planned to be turned obligatory in the future.   Using only phone number is not recommended when security is a concern, because phone numbers are public and Mobile-ID users may get spammed.  Using both Personal Identification Code and phone number:   When user makes a mistake when entering either his/her Personal Identification Code or phone number, it's very unlikely that Mobile-ID request will appear in another unintended Mobile-ID user's phone.  Spamming is complicated because Personal Identification Codes are not public  The user does not necessarily have to enter such data directly: for example, a user name could be tied to a particular combination of personal identification code and a phone number.   It's mandatory for application providers to prevent spamming (by IP-restrictions or by using input parameters mentioned above), otherwise AS Sertifitseerimiskeskus must limit access to DigiDocService, to guarantee that DigiDocService stays up and running for other application providers that use it.  Application, that enables users to authenticate or digitally sign documents using Mobile-ID, must clearly present challenge number (ChallengeID parameter in MobileAuthenticate response, see below) to user and warn user to check if challenge number presented by application is the same as challenge number on mobile phone screen. If challenge numbers differ, Mobile-ID operation has to be cancelled.  Challenge number should be correctly implemented and highly visible also when Mobile-ID operations are used from Mobile device browser.", 
            "title": "Starting Mobile-ID operations"
        }, 
        {
            "location": "/#technical-suggestions-and-requirements", 
            "text": "Web applications, that enable authentication or digital signing using Mobile-ID or ID-card, should use encrypted channel (HTTPS) between browser and web server.  Mobile-ID-enabled web applications, when polling regularly DigiDocService with requests about operation state information (whether user has already entered his/her PIN number and signing/authenticating is completed or not), should, for usability reasons, not reload web page every time request is made to DigiDocService \u2013 using Ajax is recommended.  The file size is limited to 4 MB.  StartSession  describes how to send larger-scale files to the Service.", 
            "title": "Technical suggestions and requirements"
        }, 
        {
            "location": "/#service-change-history", 
            "text": "Service changes' history can be found at  http://www.id.ee/?lang=en id=36458   Information about canonic XML:  http://www.w3.org/TR/xml-c14n", 
            "title": "Service Change History"
        }, 
        {
            "location": "/api/api_docs/", 
            "text": "Authentication API\n\n\nMobileAuthenticate\n\n\nQuery for starting authentication session.\n\n\nFirst, certificate validity of the user's authentication certificate is verified. In case the certificate is valid, an authentication message is \npassed to the user's mobile phone. Otherwise, error message is returned. The resulting response to the query contains information about the user, \ntransaction ID and optionally user's certificate for authentication and certificate validity information.\n\n\nQuery\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\n\n\n\n\nType\n\n\n\n\n\n\nR\n\n\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIDCode\n\n\n\n\n\n\n\nString\n\n\n\n\n\n\n\n+\n\n\n\n\n\n\n\nPersonal Identification Code of the user.It is recommended to use both input parameters\nIDCode and PhoneNo! In case of Lithuanian Mobile-ID both IDCode and PhoneNo are mandatory.\n\n\n\n\n\n\n\n\n\n\nCountryCode\n\n\n\n\n\n\nString(2)\n\n\n\n\n\n\n-\n\n\n\n\n\n\nCountry of origin. ISO 3166-type 2-character country codes are used (e.g. EE)\n\n\n\n\n\n\n\n\n\n\nPhoneNo\n\n\n\n\n\n\nString\n\n\n\n\n\n\n+\n\n\n\n\n\n\nUser's phone number with country code in form +xxxxxxxxx (e.g. +3706234566)..\nIf both PhoneNo and IDCode parameters are given, correspondence between personal code and\nphone number is verified and in case of inconsistency SOAP error code 301 is returned. It is\nrecommended to use both input parameters IDCode and PhoneNo! In case of Lithuanian Mobile-ID users\nIDCode and PhoneNo are BOTH mandatory.\n(see \nStarting Mobile-ID Operations\n). If the element \nPhoneNo\n\nhas been set,\nthe country attribute set in the prefix is used (independent on the value of the\nelement \"CountryCode\").\n\n\n\n\n\n\n\n\n\n\nLanguage\n\n\n\n\n\n\n\nString(3)\n\n\n\n\n\n\n\n+\n\n\n\n\n\n\n\nLanguage for user dialog in mobile phone. 3-letters capitalized acronyms are used.\nPossible values: EST, ENG, RUS, LIT\n\n\n\n\n\n\n\n\n\n\nServiceName\n\n\n\n\n\n\n\nString(20)\n\n\n\n\n\n\n\n+\n\n\n\n\n\n\n\nName of the service \u2013 previously agreed with Application Provider and DigiDocService operator.\nMaximum length \u2013 20 chars.\n\n\n\n\n\n\n\n\n\n\nMessageToDisplay\n\n\n\n\n\n\nString(40 bytes)\n\n\n\n\n\n\n-\n\n\n\n\n\n\nText displayed in addition to ServiceName and before asking authentication PIN.\nMaximum length is 40 bytes. In case of Latin letters, this means also a 40 character long text,\nbut Cyrillic characters may be encoded by two bytes and you will not be able to send more\nthan 20 symbols.\n\n\n\n\n\n\n\n\n\n\nSPChallenge\n\n\n\n\n\n\nString(20)\n\n\n\n\n\n\n-\n\n\n\n\n\n\n10-byte random challenge generated by the Application Provider witch would be part of the\nmessage for signing by user during authentication. In HEX form.\n\n\n\n\nNB!\n For security reasons it is\nrecommended to always fill this field with a different random value every time. When authentication\nsucceeds, it is recommended to verify that the user signed a message that contains this challenge\nvalue. (For more information about signature verification, see the description of the \nSignature\n\nelement for the \nGetMobileAuthenticateStatus\n operation.)\n\n\n\n\n\n\n\n\n\n\n\n\nMessagingMode\n\n\n\n\n\n\nString\n\n\n\n\n\n\n+\n\n\n\n\n\n\nMode to be used to respond to theMobileAuthenticate query. Options are:\n\n \nasynchClientServer\n \u2013 Appliaction Provider will make repeated G_etMobileAuthenticateStatus_\n  queries.\n\n \nasynchServerServer\n \u2013 the response will be sent to the Application Provider by in\n  asynchronous mode (see: parameter AsyncConfiguration)\n\n\n\n\n\n\n\n\n\n\nAsyncConfiguration\n\n\n\n\n\n\nInteger\n\n\n\n\n\n\n-\n\n\n\n\n\n\nThis parameter is required when using \"asynchServerServer\" messaging mode and identifies\nconfiguration mode. This value has to be previously agreed. Currently, \nJava Message Services\n (JMS)\ninterface is supported.\n\n\n\n\n\n\n\n\n\n\nReturnCertData\n\n\n\n\n\n\n\nBoolean\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\nIf \nTRUE\n, certificate of the user is returned. Certificate is useful if AP wants to save it\nand/or independently verify correctness of the signature and validation data.\n\n\n\n\n\n\n\n\n\n\nReturnRevocationData\n\n\n\n\n\n\nBoolean\n\n\n\n\n\n\n-\n\n\n\n\n\n\nIf \nTRUE\n, OCSP response to the certificate validity query is returned.\n\n\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\nInteger\n\n\nSession code for current session\n\n\n\n\n\n\nStatus\n\n\nString\n\n\n\"OK\" if no errors \nNB!\n\"OK\" does not mean that the user is successfully authenticated \u2013 response \"USER_AUTHENTICATED\" would indicate this instead.In case error occurs, a SOAP error object is returned. Description of the SOAP error object and list of error codes are described in \nSOAP Error Messages\n.\n\n\n\n\n\n\nUserIDCode\n\n\nString\n\n\nPersonal Identity Code of the user. The value is fetched from \"Serial Number\" field of the certificate\n\n\n\n\n\n\nUserGivenname\n\n\nString\n\n\nFirst name of the user. The value is fetched from \"G\" (given name) field of the certificate\n\n\n\n\n\n\nUserSurname\n\n\nString\n\n\nLast name of the user. The value is fetched from \"SN\" (surname) field of the certificate\n\n\n\n\n\n\nUserCountry\n\n\nString(2)\n\n\nCountry of the origin in ISO 3166 2-character style. The value is fetched from \"C\" (country) field of the certificate\n\n\n\n\n\n\nUserCN\n\n\nString\n\n\n\u201eCommon Name\" of the certificate holder. The value is fetched from \"CN\" (common name) field of the certificate\n\n\n\n\n\n\nCertificateData\n\n\nString\n\n\nUser's certificate in BASE64 coding. Returned if parameter ReturnCertData was set \u201eTRUE\" in the query.\n\n\n\n\n\n\nChallengeID\n\n\nString\n\n\n4-character control code calculated on basis of  the Challenge value to be signed. This code is displayed on mobile phone's screen and shall be also displayed by Application Provider in order to ensure the user on authenticity of the query. \nNB!\n Application provider must ask user to verify that those codes are the same.\n\n\n\n\n\n\nChallenge\n\n\nString\n\n\nThe data to be signed by the user. Consists of mixture of data sent by Application Provider in SPChallenge (10 bytes) field of the query and data added by DigiDocService (also 10 bytes).Returned only if SPChallenge field in the query was set.\n\n\n\n\n\n\nRevocationData\n\n\nString\n\n\nOCSP response in BASE64 coding. Returned if parameter ReturnRevocationData was set \u201eTRUE\" in the query.\n\n\n\n\n\n\n\n\nIn case asynchClientServer messaging mode is used, the Application Provider shall start sending GetMobileAuthenticateStatus queries until error message or positive answer will be returned.\n\n\n\n\nNB!\n It is reasonable to wait 15 seconds before starting sending status queries  - it is improbable that message from user's phone \narrives earlier because of technical and human limitations. Mobile-ID transactions will time out in 4 minutes or less.\n\n\n\n\nWhen using asynchServerServer messaging mode, a message is sent to the Application Provider in accordance with previously agreed configuration.\n\n\nThe structure of the XML message sent back to Application provider is as follows:\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\nInteger\n\n\nSession identifier\n\n\n\n\n\n\nStatus\n\n\nString\n\n\n\"USER_AUTHENTICATED\" in case of successful authentication. Other possible values are described in the description of response to the \nGetMobileAuthenticateStatus\n query.\n\n\n\n\n\n\nData\n\n\nString\n\n\nSignature value in BASE64 encoding. Returned only if SPChallenge field in the query was set. For more info, see the \nSignature\n field in the \nGetMobileAuthenticateStatus\n and \nSigning algorithms\n\n\n\n\n\n\n\n\nGetMobileAuthenticateStatus\n\n\nThis method is relevant when asynchClientServer messaging mode is used.\n\n\nQuery\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nR\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\nInteger\n\n\n+\n\n\nSession identifier \u2013 use the value returned with MobileAuthenticate method\n\n\n\n\n\n\nWaitSignature\n\n\nBoolean\n\n\n+\n\n\n\"If \"TRUE\", then the Service will wait for a response from MSSP before responding. If \"FALSE\" then response is returned immediately and the application should invoke GetMobileAuthenticate again after a small delay (2-10 seconds).\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\n\n\n\n\nType\n\n\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStatus\n\n\n\n\n\n\nString\n\n\n\n\n\n\nProcess status:\n\n\n\n\nOUTSTANDING_TRANSACTION\n \u2013 authentication is still on the way;\n\n\nUSER_AUTHENTICATED\n \u2013 authentication successful;\n\n\nNOT_VALID\n \u2013 the action is completed but the signature created is not valid;\n\n\nEXPIRED_TRANSACTION\n \u2013 timeout;\n\n\nUSER_CANCEL\n \u2013 user cancelled the action;\n\n\nMID_NOT_READY\n \u2013 the MobileID of the SIM is not yet ready for the operations;\n\n\nPHONE_ABSENT\n \u2013 phone is switched off or out of coverage;\n\n\nSENDING_ERROR\n \u2013 other error when sending message (phone is incapable of receiving the\n  message, error in messaging server etc.);\n\n\nSIM_ERROR\n \u2013 SIM application error;\n\n\nINTERNAL_ERROR\n \u2013 technical error.\n\n\n\n\n\n\n\n\n\n\n\n\nSignature\n\n\n\n\n\n\nString\n\n\n\n\n\n\n\n\nRaw signature value in Base64 encoding. Returned only if SPChallenge field in\n  the query was set in the MobileAuthenticate request.\n\n\nNB! For security reasons it is recommended that application providers verify this\n  signature. The signature signs the challenge value that was returned by the\n  MobileAuthenticate call (the \"Challenge\" field). It should also be verified that the\n  first 10 bytes of this challenge were chosen by the application provider (that is,\n  they should be equal to the value \"SPChallenge\" that was passed into MobileAuthenticate).\n\n\nNote that the authentication signatures are calculated without hash functions, both in\n  the case of RSA and ECDSA. For example, if the challenge\n  was \"12345678901234567890369330D3483DAED0496D\", (where the first half was chosen by\n  the application provider), then the algorithm proceeds as if this challenge was\n  actually a hash value. Therefore, for RSA, the usual SHA-1 prefix is prepended to the\n  challenge before signing (even though the value did not come from SHA-1; this is\n  the standard SHA-1 prefix from PKCS #1). As usual, ECDSA does not have prefixes.\n\n\nThe signature should be verified against the authentication certificate of\n  the given user (as returned by the \"CertificateData\" field in MobileAuthenticate).\n\n\n\n\n\n\n\n\n\n\n\n\nThe session will be terminated unless the Status has value OUTSTANDING_TRANSACTION.\n\n\nCheckCertificate\n\n\nGiven method can be used to check the validity of certificates (including ID-card and other smartcard certificates and also digital stamp certificates issued by AS Sertifitseerimiskeskus) and number of foreign Certification Authorities. Additional info is available from the sales department of Sertifitseerimiskeskus.\n\n\nAdditionally, this operation returns the values of the most important fields from the certificate.\n\n\nQuery\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nR\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nCertificate\n\n\nString\n\n\n+\n\n\nCertificate to be checked for validity, in Base64 format. May include \u201e---BEGIN CERTIFICATE---\u201e and \u201e---END CERTIFICATE---\u201e lines (according to PEM format)\n\n\n\n\n\n\nReturnRevocationData\n\n\nBoolean\n\n\n-\n\n\nIf TRUE, certificate's validity information is returned on RevocationData field in response.\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\n\n\n\n\nType\n\n\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStatus\n\n\n\n\n\n\nString\n\n\n\n\n\n\nCertificate's validity information:\n\n\n\n\nGOOD\n \u2013 certificate is valid\n\n\nREVOKED\n \u2013 certificate has been revoked\n\n\nUNKNOWN\n \u2013 certificate has never been issued or issuer is unknown\n\n\nEXPIRED\n \u2013 certificate has been expired\n\n\nSUSPENDED\n \u2013 certificate has been suspended\n\n\n\n\n\n\n\n\n\n\n\n\nUserIDCode\n\n\n\n\n\n\n\nString\n\n\n\n\n\n\n\nCertificate owner's Personal Identification Code. In case certificate has been issued by SK,\nthis value will be taken from certificate subject's serial number field.\n\n\n\n\n\n\n\n\n\n\nUserGivenname\n\n\n\n\n\n\n\nString\n\n\n\n\n\n\n\nCertificate owner's given name, this value will be taken from certificate subject's G (given name)\nfield.\n\n\n\n\n\n\n\n\n\n\nUserSurname\n\n\n\n\n\n\nString\n\n\n\n\n\n\nCertificate owner's surname, this value will be taken from certificate subject's S (surname) field.\n\n\n\n\n\n\n\n\n\n\nUserCountry\n\n\n\n\n\n\n\nString(2)\n\n\n\n\n\n\n\nCertificate owner's country, this value will be taken from certificate subject's C (country) field.\nISO 3166 2-letter country codes are used.\n\n\n\n\n\n\n\n\n\n\nUserOrganisation\n\n\n\n\n\n\n\nString\n\n\n\n\n\n\n\nCertificate owner's organization, this value will be taken from certificate\nsubject's O (Organization) field.\n\n\n\n\n\n\n\n\n\n\nUserCN\n\n\n\n\n\n\n\nString\n\n\n\n\n\n\n\nCertificate owner's common name, this value will be taken from certificate subject's\nCN (Common name) field.\n\n\n\n\n\n\n\n\n\n\nIssuerCN\n\n\n\n\n\n\n\nString\n\n\n\n\n\n\n\nCertificate issuer's common name, this value will be taken from certificate issuers's\nCN (Common name) field.\n\n\n\n\n\n\n\n\n\n\nKeyUsage\n\n\n\n\n\n\nString\n\n\n\n\n\n\nUsage of the (secret) key related to the certificate.\n\n\n\n\n\n\n\n\n\n\nEnhancedKeyUsage\n\n\n\n\n\n\nString\n\n\n\n\n\n\nEnhanced key usage\n\n\n\n\n\n\n\n\n\n\nRevocationData\n\n\n\n\n\n\n\nString\n\n\n\n\n\n\n\nCertificate's validity information (OCSP service's response) in Base64 format. This response\nparameter is only present when ReturnRevocationData request parameter has been set to TRUE.\n\n\n\n\n\n\n\n\n\n\nResponse parameters are all UTF-8 encoded.\n\n\nDigital Signature API\n\n\nStartSession\n\n\nIn most cases the transaction with the service is started using the StartSession method. It possible to also send data files with this operation; such files will be stored in session and can be operated on later. More precisely, there are 3 different ways to use StartSession:\n\n\n\n\nThe request can contain a DigiDoc or BDOC container. This is useful for signing and verifying existing containers, for adding or removing data files from the container, and also for extracting data file contents. To use this option, use the \"SigDocXML\" parameter. (Conversely, the \"datafile\" parameter should be left empty.)\n\n\nA session can also be started without any data files. This is useful for example for creating new BDOC containers (which can be accomplished by invoking the \"CreateSignedDoc\" operation next). In this case, both parameters should be empty: \"SigDocXML\" and \"datafile\".\n\n\nThere is also an option for creating DigiDoc containers directly from this operation (this option only works for DigiDoc containers; BDOC can be created with the \"CreateSignedDoc\" operation). To use this operation, \"SigDocXML\" parameter should be empty, \"datafile\" parameter should be filled.\n\n\n\n\nIn the course of the StartSession's query a unique session identifier is returned, which should be added to every procedure called within the transaction.\n\n\nQuery:\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nR\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSigningProfile\n\n\nString\n\n\n-\n\n\nThis value is currently ignored and may be empty. \n \nPS! This parameter is deprecated and exists only due to historical reasons. \nSigningProfile\n is identified by the service itself when a container is provided with \nSigDocXml\n parameter. \n It is recommended not to use \nSigningProfile\n parameter as it will be removed in the future!\n\n\n\n\n\n\nSigDocXML\n\n\nString\n\n\n-\n\n\nBDOC or DDOC document. A DigiDoc in XML transformed to HTML-Escaped format. For example \nDataFile\n should be transformed to \nDataFile\n. The container in BDOC format should be coded to BASE64 before it is delivered to the service.\n\n\n\n\n\n\nbHoldSession\n\n\nBoolean\n\n\n-\n\n\nA flag that indicates whether the data sent within the StartSession should be stored or the session should be closed deleting all the temporary files straight after response.  The default value is \nfalse\n.\n\n\n\n\n\n\ndatafile\n\n\nDatafile\n\n\n-\n\n\nGiven parameter enables to send to service a data file within the StartSession request. Based on the file a DigiDoc container is created. (The BDOC format is not supported in this use case \u2013 please see the \"CreateSignedDoc\" operation). For example, when sending a \ncv.pdf\n, a \ncv.ddoc\n is created which contains the \"cv.pdf\" only. The structure of a datafile element is described in \nDataFileInfo\n. While adding the datafile it's unnecessary to determine the identifier. By default, DIGIDOC-XML 1.3 format fis created.\n\n\n\n\n\n\n\n\n\n\nNB!\n  It's not allowed to send to the service a data of the SigDocXML and the Datafile at the same time, as these parameters exclude each other.\n\n\n\n\nResponse:\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nString\n\n\nValue \u201eOK\" or an error string\n\n\n\n\n\n\nSesscode\n\n\nInteger\n\n\nSession code used for further requests in the given transaction.\n\n\n\n\n\n\nSignedDocInfo\n\n\nSignedDocInfo\n\n\nIf a StartSession request contains a data file or a DigiDoc file, a SignedDocInfo structure will be returned in the format demonstrated in \nSignedDocInfo\n in current document.\n\n\n\n\n\n\n\n\nHASHCODE\n\n\nNormally, a size limit of 4 MB applies to digitally signed containers and data files sent to DigiDocService. To use bigger files, a \"HASHCODE\" mode of operation is supported by DigiDocService, where only hashes of data files are sent to the server (in other words, file contents are not sent to the service). This can also improve performance for large data files, as sending bigger files over network can take time.\n\n\nTo use this HASHCODE mode, the DigiDoc or BDOC-container should be converted to the HASHCODE form before sending it to the service. (In this form, the data file contents are replaced with their hash values.) Similarly, when the container is returned by the service, it should be converted back to regular form by inserting back the data file contents. Thus, in the end, the application provider still has a regular container that can be verified by standard tools (i.e., the DigiDoc3 client software). The exact form of HASHCODE depends on the particular format used (DDOC or BDOC).\n\n\nBDOC format and HASHCODE\n\n\n\n\nNote!\n Hashcode is currently supported only for BDOC-TM.\n\n\nSupport for BDOC-TS will be added in the future.\n\n\n\n\nTransforming a BDOC container to HASHCODE form\n\n\nGiven the BDOC format, the container should be transformed to the HASCODE form in the following steps (before sending it to the DigiDocService):\n\n\n\n\n1)Remove \nall signed\n files from the container. As the BDOC container is a ZIP-file, this can be accomplished with standard ZIP-file tools. The signed files are in the root folder of the ZIP file.\n\n\n2)Add hashes of the removed files into the container. Two hash files need to be added, to the following locations in the BDOC (ZIP) file:\n\n\nMETA-INF/hashcodes-sha256.xml\n\n\nMETA-INF/hashcodes-sha512.xml\n\n\n\n\n\n\n\n\nThe first hash file contains the SHA-256 hashes of all of the signed files. Similarly, the second file contains SHA-512 hashes for the same files. Both files have the same format: for every signed file, a full path is listed (as it appears in the BDOC file), the hash of the file in Base64, and also the length of the file in bytes. (The XML-schema is below). Hash values are calculated directly on the file contents (i.e., not over XML elements, which is different from the HASHCODE form for DDOC).\n\n\nAs an example, if the container has 2 documents, named \" \nfile1.txt\n\" and \" \nFile2.docx\n\" (the sample files are downloadable from \nhttp://www.id.ee/public/bdoc_hashcode_example.zip\n), the corresponding hash files have the following contents:\n\n\nMETA-INF/hashcodes-sha256.xml:\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nhashcodes\n\n    \nfile-entry full-path=\nfile1.txt\n hash=\nfo+6a5j64VcKWJwvXsJE8PlB3tAdQ8/uwHAL5AEWmbk=\n size=\n189\n /\n\n    \nfile-entry full-path=\nFile2.docx\n hash=\n3v5ZupBhiNxkCmmVKbtwwJKVCKxTZrQDPpNKF02ZiPo=\n size=\n11665\n/\n\n\n/hashcodes\n\n\n\n\n\nMETA-INF/hashcodes-sha512.xml:\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nhashcodes\n\n    \nfile-entry full-path=\nfile1.txt\n hash=\nWIJZPgHWMrqfHqH7Arfjo8ymMZvI0IUgG8G8UESbnHXcpEPgOKutPph1GYOcSprj08VZa0m+myhlVPH29ThjIA==\n size=\n189\n /\n\n    \nfile-entry full-path=\nFile2.docx\n hash=\n3z7gxofgCPoX2feWB9TQhUIvOlhsxm9RVR3iEFcCZ7uPcZuRc+KS9evmBC6bAMUnQOvkygXNTPfTIKb50krYYg==\n size=\n11665\n /\n\n\n/hashcodes\n\n\n\n\n\nThe hash files must conform to the following XML-schema:\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n standalone=\nyes\n?\n\n\nxs:schema version=\n1.0\n xmlns:xs=\nhttp://www.w3.org/2001/XMLSchema\n\n  \nxs:element name=\nhashcodes\n type=\nhashcodesType\n/\n\n  \nxs:complexType name=\nfileEntryType\n\n    \nxs:attribute name=\nfull-path\n type=\nxs:string\n use=\nrequired\n/\n\n    \nxs:attribute name=\nhash\n type=\nxs:string\n use=\nrequired\n/\n\n    \nxs:attribute name=\nsize\n type=\nxs:long\n use=\nrequired\n/\n\n  \n/xs:complexType\n\n  \nxs:complexType name=\nhashcodesType\n\n    \nxs:sequence\n\n      \nxs:element name=\nfile-entry\n type=\nfileEntryType\n minOccurs=\n0\n maxOccurs=\nunbounded\n/\n\n    \n/xs:sequence\n\n  \n/xs:complexType\n\n\n/xs:schema\n\n\n\n\n\n\n\nNote!\n Although the above ZIP operations can be done with any standard archive tools, some care must be taken to \nprevent accidental alterations to the file structure. Specifically, the ASiC standard mandates the following about \nthe \"mimetype\" file:\n\n\n\n\n\n\nThe \nmimetype\n file should (continue to) be the first file in the ZIP archive.\n\n\nThe \nmimetype\n file should remain \nnot\n compressed (it should be \nstored\n, not for example \ndeflated\n).\n\n\n\n\nAfter these steps, the HASHCODE form is ready. The contents of the BDOC file will then be analogous to the following diagram (note the addition of 2 hash files and absent data files):\n\n\n\u251c\u2500\u2500 META-INF\n\u2502   \u251c\u2500\u2500 **hashcodes-sha256.xml**\n\u2502   \u251c\u2500\u2500 **hashcodes-sha512.xml**\n\u2502   \u251c\u2500\u2500 manifest.xml\n\u2502   \u2514\u2500\u2500 signatures0.xml\n\u2514\u2500\u2500 mimetype\n\n\n\n\nThe files in this example are downloadable (with BDOC containers) from the following address: \nhttp://www.id.ee/public/bdoc_hashcode_example.zip\n\n\nTransforming the BDOC container back to standard form\n\n\nWhen the HASHCODE container is returned back by DigiDocService, analogous steps need to be carried out:\n\n\n\n\n\n\n1)The data files need to be added back into the container (the container is in ZIP-format, as all BDOC files are in ZIP-format). Note the following:\n\n\n\n\n\n\nThe data files in the container need to have a ZIP-file comment about the BDOC-library. In practice, this comment may simply be copied from other files in the archive (for example, from the \u201emimetype\"-file). Note that the signature files (META-INF/signatureN.xml) should keep their existing comments (this is to preserve information about the tools used for signing particular signatures). An example of such comment is the following:\nLIB DigiDocService/3.6.4 format: BDOC/2.1 Java: 1.7.0_51/Oracle Corporation OS: Windows 8/amd64/6.2 JVM: Java HotSpot(TM) 64-Bit Server VM/Oracle Corporation/24.51-b03\n\n\n\n\n\n\nSome care must be taken to prevent accidental alterations to the file structure. Specifically, the ASiC standard mandates the following about the \"mimetype\" file:\n\n\n\n\nThe \"mimetype\" file should (continue to) be the \nfirst\n file in the ZIP archive.\n\n\nThe \"mimetype\" file should remain \nnot\n compressed (it should be \nstored\n, not for example \ndeflated\n).\n\n\n\n\n\n\n\n\n2)Remove all the hash files hashcodes-*.xml from the folder META-INF.\n\n\n\n\n\n\nAfter these steps, the BDOC container is again in its normal form, and is ready to be used by for example the DigiDoc3 client software. Its contents should look similar to this:\n\n\n\u251c\u2500\u2500 META-INF\n\u2502   \u251c\u2500\u2500 manifest.xml\n\u2502   \u2514\u2500\u2500 signatures0.xml\n\u251c\u2500\u2500 **file1.txt**\n\u251c\u2500\u2500 **File2.docx**\n\u2514\u2500\u2500 mimetype\n\n\n\n\nDDOC format and HASHCODE\n\n\nExample\n 1: sending hash code instead of full data file to the service for signing\n\n\nFor instance, we intend to digitally sign following 42-bytes long (containing 2 CRLF newlines) text file named test.txt:\n\n\nThis is a test file\nsecondline\nthirdline\n\n\n\n\nAt first, we compose following xml-element, in \ncanonic\n 1\nform, where value \u201eVGhpcyBpcyBhIHRlc3QgZmlsZQ0Kc2Vjb25kbGluZQ0KdGhpcmRsaW5l\" is previus datafile Base64 encoded and where there is added one newline before  \n ending tag:\n\n\nDataFile xmlns=\nhttp://www.sk.ee/DigiDoc/v1.3.0#\n ContentType=\nEMBEDDED\\_BASE64\n Filename=\ntest.txt\n Id=\nD0\n MimeType=\ntext/plain\n Size=\n42\nVGhpcyBpcyBhIHRlc3QgZmlsZQ0Kc2Vjb25kbGluZQ0KdGhpcmRsaW5l\n\n/DataFile\n\n\n\n\n\nAssuming, that xml canonization replaced CRLF (\\r\\n) newlines with LF (\\n) and Base64-encoded datafile is in form of 64-symbols long lines and all values, including attribute values, are UTF8 encoded, we proceed by calculating sha1 hash over previus \n..\n element, including tags. We should get HEX value of  \u201eb7c7914ab293811e0f0002932d85860a3b934890\", which we convert to binary string (consequential bytes): 0xb7, 0xc7, 0x91, ..., 0x90. And at last we Base64-encode the binary string, which gives us following result:  \u201et8eRSrKTgR4PAAKTLYWGCjuTSJA=\".\n\n\nIn PHP progamming language, it would look something like that:\n\n\nbase64\\_encode(pack(\nH\\*\n, \nb7c7914ab293811e0f0002932d85860a3b934890\n));\n\n\n\n\nNow, lets compose a data structure for StartSession method's Datafile parameter and call it $inputData:\n\n\nFilename=\ntest.txt\n\nMimeType=\ntext/plain\n\nContentType=\nHASHCODE\n\nSize=42\nDigestType=\nsha1\n\nDigestValue=\nt8eRSrKTgR4PAAKTLYWGCjuTSJA=\n\n\n\n\n\nNow lets send this datastructure to DigiDocService, using StartSession method:\n\n\nStartSession(\u201e\n, \u201e\n, TRUE, $inputData);\n\n\n\n\nWhat follows are series of calls to DigiDocService to complete the digital signing process. Lets say we have done everything that's needed and DigiDoc container is signed and ready in the service waiting for us to download it. Now we call service's GetSignedDoc method to get the container.\n\n\nIn the downloaded container, we have to replace xml element \n ... \n with the one we previusly composed:\n\n\nDataFile xmlns=\nhttp://www.sk.ee/DigiDoc/v1.3.0#\n ContentType=\nEMBEDDED\\_BASE64\n Filename=\ntest.txt\n Id=\nD0\n MimeType=\ntext/plain\n Size=\n42\nVGhpcyBpcyBhIHRlc3QgZmlsZQ0Kc2Vjb25kbGluZQ0KdGhpcmRsaW5l\n\n/DataFile\n\n\n\n\n\nFor now we should have correct DigiDoc container.\n\n\nExample 2\n: sending Digidoc container to the service, replacing full datafile with hash code.\n\n\nFor instance, if we have the following DataFile element in DigiDoc container:\n\n\nDataFile xmlns=\nhttp://www.sk.ee/DigiDoc/v1.3.0#\n ContentType=\nEMBEDDED\\_BASE64\n Filename=\ntest.txt\n Id=\nD0\n MimeType=\ntext/plain\n Size=\n42\nVGhpcyBpcyBhIHRlc3QgZmlsZQ0Kc2Vjb25kbGluZQ0KdGhpcmRsaW5l\n\n/DataFile\n\n\n\n\n\nand we wish to send hash code to the service, not full data file, then we should replace the above xml element with the following:\n\n\n\n\nAfter completing operations (verifying document, or adding signatures etc) with DigiDoc container that we sent to the service, and downloading the container, we have to make the reverse replacement so that DataFile element contains full data file. Otherwise, it is not a proper DigiDoc format file.\n\n\nCloseSession\n\n\nA transaction is closed by the CloseSession request. As the result of the request all the information stored in the server within this session will be deleted. To start a new session a StartSession request should be sent once again. It's always recommended to close a transaction with the CloseSession request. If the application doesn't close the session itself, it will be closed automatically after timeout.\n\n\nQuery:\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nR\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\nInteger\n\n\n+\n\n\nAn identifier of the active session.\n\n\n\n\n\n\n\n\nResponse:\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nString\n\n\nIf the request is successful, the value will be \u201eOK\".\n\n\n\n\n\n\n\n\nIf the request is unsuccessful, a SOAP-FAULT object will be returned.\n\n\nCreateSignedDoc\n\n\nIf an application desires to define the format and version of the formable container, the CreateSignedDoc request will be used for \ncreating a new container. After the CreateSignedDoc request takes place the AddDataFile request for adding the data. \nNow the file is ready for digital signing.\n\n\nQuery\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\n\n\n\n\nType\n\n\n\n\n\n\nR\n\n\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\n\n\n\n\nInteger\n\n\n\n\n\n\n+\n\n\n\n\n\n\nAn identifier of the active session.\n\n\n\n\n\n\n\n\n\n\nFormat\n\n\n\n\n\n\nString\n\n\n\n\n\n\n+\n\n\n\n\n\n\na format of a document container to be created (currently supported formats are DIGIDOC-XML and BDOC)\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\n\n\n\n\n\nString\n\n\n\n\n\n\n\n+\n\n\n\n\n\n\n\na version number of the format of a creatable document container\n(currently supported version for DIGIDOC-XML is 1.3 and for BDOC 2.1)\n\n\n\n\n\n\n\n\n\n\nSigningProfile\n\n\n\n\n\n\nString\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\nLT_TM\n (Long Term with Time Mark): a profile for BDOC-TM (a BDOC signature with time-mark)\n  and DDOC. \nLT_TM\n is currently the default option.\n\n\nLT\n (Long Term): Used for creating standard BDOC-TS signatures (BDOC with time-stamp / ASiC-E);\nit is supported for the BDOC container format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNB!\n Only container formats DIGIDOC-XML 1.3 and BDOC 2.1 are supported. If an inappropriate combination of given \nformat and version number is used in request parameters, a SOAP error object with error message \"Invalid format and version combination!\" will be returned.\n\n\n\n\nThe description of DigiDoc formats are available on the webpage \nhttp://www.id.ee/index.php?id=36108\n .\n\n\nResponse\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nString\n\n\nIf the request is successful, the value will be \u201eOK\".\n\n\n\n\n\n\nSignedDocInfo\n\n\nString\n\n\nSignedDocInfo structure will be returned in the format demonstrated in \nSignedDocInfo\n.\n\n\n\n\n\n\n\n\nAddDataFile\n\n\nAddDataFile request enables to add an additional data file to a DigiDoc container which is in session. If one datafile is added within the StartSession, but the \nuser would like to sign a few more data files in a DigiDoc container, then using this method the rest of the data files will be added before signing.\n\nThe size limit of 4 MB applies for DigiDoc containers and datafiles sent to Service. For bigger files content type HASHCODE could be used. See description below.\n\n\nNB! Adding a data file is possible in the DigiDoc file with no signatures only.\n\n\nQuery\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\n\n\n\n\nType\n\n\n\n\n\n\nR\n\n\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\n\n\n\n\nInteger\n\n\n\n\n\n\n+\n\n\n\n\n\n\nAn identifier of the active session.\n\n\n\n\n\n\n\n\n\n\nFileName\n\n\n\n\n\n\nString\n\n\n\n\n\n\n+\n\n\n\n\n\n\nName of the data file without the path.\n\n\n\n\n\n\n\n\n\n\nMimeType\n\n\n\n\n\n\nString\n\n\n\n\n\n\n+\n\n\n\n\n\n\nType of the datafile\n\n\n\n\n\n\n\n\n\n\nContentType\n\n\n\n\n\n\nString\n\n\n\n\n\n\n+\n\n\n\n\n\n\nData file's content type (\nHASHCODE\n, \nEMBEDDED_BASE64\n)\n\n\n\n\nHASHCODE\n \u2013 To service is sent the hashcode only, not the entire data file's content.\n  The method how to calculate the hashcode is described in parameter \nDigestType\n and the hashcode itself is in\n  parameter \nDigestValue\n. Please see \nStartSession\n. how to calculate hash from the\n  source data file and how to send\n  it to the service.\n\n\nEMBEDDED_BASE64\n - The content of the file is in Base64 encoding in Content parameter.\n\n\n\n\n\n\n\n\n\n\n\n\nSize\n\n\n\n\n\n\nInteger\n\n\n\n\n\n\n+\n\n\n\n\n\n\nThe actual size of data file in bytes.\n\n\n\n\n\n\n\n\n\n\nDigestType\n\n\n\n\n\n\n\nString\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\nHash code type of the data file. In case of DIGIDOC-XML format, \"sha1\" is supported; in case of BDOC, \"sha256\"\nis supported. Required in case of HASHCODE content type of file only.\n\n\n\n\n\n\n\n\n\n\nDigestValue\n\n\n\n\n\n\nString\n\n\n\n\n\n\n-\n\n\n\n\n\n\nThe value of data file's hash in Base64 encoding.. Required for HASHCODE content type only.\nIn case of the DIGIDOC-XML format, the hash is calculated over a DigiDoc \n element, using a canonicalized\nform (for more information, see \nStartSession\n).In case of BDOC, the has is calculated over\nthe binary data file content.\n\n\n\n\n\n\n\n\n\n\nContent\n\n\n\n\n\n\nString\n\n\n\n\n\n\n-\n\n\n\n\n\n\nThe content of data file in Base64 encoding, is set if ContentType is \nEMBEDDED_BASE64\n.\n\n\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nString\n\n\nIf the request is successful, the value will be \u201eOK\".\n\n\n\n\n\n\nSignedDocInfo\n\n\nSignedDocInfo\n\n\nSignedDocInfo structure will be returned in the format demonstrated in \nSignedDocInfo\n.\n\n\n\n\n\n\n\n\nMobileSign\n\n\nThe MobileSign method invokes mobile signing of a DigiDoc file in the current session. For using the MobileSign method, at least one datafile shall be in DigiDoc container.\n\n\nIn case creation of \"pure\" mobile signature is needed \u2013 i.e. without creating DigiDoc file and/or sending it to the service \u2013 MobileCreateSignature should be used instead.\n\n\nQuery\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\n\n\n\n\nType\n\n\n\n\n\n\nR\n\n\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\n\n\n\n\nInteger\n\n\n\n\n\n\n+\n\n\n\n\n\n\nAn identifier of the active session\n\n\n\n\n\n\n\n\n\n\nSignerIDCode\n\n\n\n\n\n\nString\n\n\n\n\n\n\n+\n\n\n\n\n\n\nIdentification number of the signer (personal national ID number).It is recommended\nto use both input parameters IDCode and PhoneNo! In case of Lithuanian Mobile-ID users\nSignerIDCode and SignerPhoneNo are mandatory.\n\n\n\n\n\n\n\n\n\n\nSignersCountry\n\n\n\n\n\n\n\nString\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\nCountry which issued the personal national ID number in ISO 3166-style 2-character\nformat (e.g. \"EE\")\n\n\n\n\n\n\n\n\n\n\nSignerPhoneNo\n\n\n\n\n\n\nString\n\n\n\n\n\n\n+\n\n\n\n\n\n\nPhone number of the signer with the country code in format +xxxxxxxxx\n(for example +3706234566). If both SignerPhoneNo and SignerIDCode parameters are given,\ncorrespondence between personal code and phone number is verified and in case of\ninconsistency SOAP error code 301 is returned.It is recommended to use both input\nparameters IDCode and PhoneNo! In case of Lithuanian Mobile-ID users SignerIDCode and\nSignerPhoneNo are mandatory (see\n\nStarting Mobile-ID Operations\n).\nIf the element \nSignerPhoneNo\n has\nbeen set, the country attribute set in the prefix is used (independent on the value\nof the element \"SignersCountry\").\n\n\n\n\n\n\n\n\n\n\nServiceName\n\n\n\n\n\n\n\nString\n\n\n\n\n\n\n\n+\n\n\n\n\n\n\n\nName of the service \u2013 previously agreed with Application Provider and DigiDocService\noperator. Required, maximum length \u2013 20 chars.\n\n\n\n\n\n\n\n\n\n\nAdditionalDataToBeDisplayed\n\n\n\n\n\n\nString\n\n\n\n\n\n\n-\n\n\n\n\n\n\nAdditional text shown to the signer. Optional.Maximum length is 40 bytes. In\ncase of Latin letters, this means also a 40 character long text, but Cyrillic characters\nmay be encoded by two bytes and you will not be able to send more than 20 symbols.\n\n\n\n\n\n\n\n\n\n\nLanguage\n\n\n\n\n\n\n\nString\n\n\n\n\n\n\n\n+\n\n\n\n\n\n\n\nLanguage of the message displayed to the signer's phone. ISO 639 a 3-character-code\nin uppercase is used (for example \nEST\n, \nENG\n, \nRUS\n, \nLIT\n).\n\n\n\n\n\n\n\n\n\n\nRole\n\n\n\n\n\n\nString\n\n\n\n\n\n\n-\n\n\n\n\n\n\nThe text of the role or resolution defined by the user. Optional.\n\n\n\n\n\n\n\n\n\n\nCity\n\n\n\n\n\n\nString\n\n\n\n\n\n\n-\n\n\n\n\n\n\nName of the city, where it's signed. Optional.\n\n\n\n\n\n\n\n\n\n\nStateOrProvince\n\n\n\n\n\n\nString\n\n\n\n\n\n\n-\n\n\n\n\n\n\nName of the state/province, where it's signed. Optional.\n\n\n\n\n\n\n\n\n\n\nPostalCode\n\n\n\n\n\n\nString\n\n\n\n\n\n\n-\n\n\n\n\n\n\nPostal code of the signing location. Optional.\n\n\n\n\n\n\n\n\n\n\nCountryName\n\n\n\n\n\n\nString\n\n\n\n\n\n\n-\n\n\n\n\n\n\nName of the country, where it's signed. Optional.\n\n\n\n\n\n\n\n\n\n\nSigningProfile\n\n\n\n\n\n\nString\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\nLT_TM\n (Long Term with Time Mark): a profile for BDOC-TM (a BDOC signature\n  with time-mark) and DDOC.\n\n\nLT\n (Long Term): Used for creating standard BDOC-TS (BDOC with time-stamp / ASiC-E)\n  signatures.\n\n\n\n\n\n\n\n\n\n\n\n\nMessagingMode\n\n\n\n\n\n\nString\n\n\n\n\n\n\n+\n\n\n\n\n\n\nDetermines the mode how the response of the MobileSign is returned.\nFollowing modes are supported:\n\n\n\n\nasynchClientServer\n \u2013 Some additional status request are made\n  after \nMobileSign\n request by the Application Provider\n\n\nasynchServerServer\n \u2013  After signing or in case of an error the server\n  sends a request to the client-application . The client application should\n  be capable to act in server mode to recieve the signature information request according\n  to the parameters in AsyncConfiguration parameter.\n\n\n\n\n\n\n\n\n\n\n\n\nAsyncConfiguration\n\n\n\n\n\n\n\nInteger\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\nDetermines configuration used in \nasynchServerServer\n messaging mode.\nThis shall be agreed previously between Application Provider and DigiDocService provider.\n\n\n\n\n\n\n\n\n\n\nReturnDocInfo\n\n\n\n\n\n\n\nBoolean\n\n\n\n\n\n\n\n+\n\n\n\n\n\n\n\nIf the value is true, the DigiDoc file information is returned as a\nresult of the request.\n\n\n\n\n\n\n\n\n\n\nReturnDocData\n\n\n\n\n\n\n\nBoolean\n\n\n\n\n\n\n\n+\n\n\n\n\n\n\n\nIf the value is true, a DigiDoc document in HTMLescaped format \nSignedDocData\n\nelement is returned.\n\n\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nString\n\n\n\"OK\" or error message.\n\n\n\n\n\n\nStatusCode\n\n\nString\n\n\nIf the request is successful, 0 is returned, otherwise an error code.\n\n\n\n\n\n\nChallengeID\n\n\nString\n\n\n4-digit control code calculated from hash of the value to be signed. The control code shall be displayed to the user in order to provide means to verify authenticity of the signing request.\n\n\n\n\n\n\n\n\nIf  asynchClientServer messaging mode is used then an Application Provider shall start sending GetSignedDocInfo requests to complete the signing session.\n\n\n\n\nNB!\n It is reasonable to wait at least 10 seconds before starting sending status queries  - it is improbable that message from \nuser's phone arrives earlier because of technical and human limitations. Mobile-ID transactions will time out in 4 minutes or less.\n\n\n\n\nIn case \nasynchServerServer\n messaging mode is used, a message will be sent from DigiDocService according to previously agreed configuration. The message is sent in XML format as following:\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\nInteger\n\n\nAn identifier of the active session.\n\n\n\n\n\n\nStatus\n\n\nString\n\n\nStatus code. \u201eOK\" if no errors, other possible responses are described in description of GetSignedDocInfo request (field \u201eStatus\").\n\n\n\n\n\n\nData\n\n\nString\n\n\na) XML structure described in \nSignedDocInfo\n of the document if value of the ReturnDocInfo was set \"true\" on the request.b) DigiDoc file as HTML encoded if ReturnDocInfo was set \"false\" and ReturnDocData  was set \"true\" in the request.c) Empty if both ReturnDocInfo and ReturnDocData were set \u201efalse\" in the request.\n\n\n\n\n\n\n\n\nGetStatusInfo\n\n\nGetStatusInfo request is for getting the information about the document in session (signed) and it's status. GetStatusInfo request is also used in mobile signing in asynchronous Client-Server mode to get the signing process'es state information.\n\n\nRequest\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nR\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\nInteger\n\n\n+\n\n\nAn identifier of the active session.\n\n\n\n\n\n\nReturnDocInfo\n\n\nBoolean\n\n\n+\n\n\nIf the value is \u201etrue\", in response SignedDocInfo is set.\n\n\n\n\n\n\nWaitSignature\n\n\nBoolean\n\n\n+\n\n\nIf the value is \u201etrue\", response is not sent before message from mobile phone is received or error condition is detected. If the value is \"false\", the response is returned immediately and the GetStatusInfo invocation should be repeated after a short time interval (2-10 seconds).\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\n\n\n\n\nType\n\n\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStatus\n\n\n\n\n\n\nString\n\n\n\n\n\n\nStatus code of the last request. In case of successful request, \"OK\" or an error string.\n\n\n\n\n\n\n\n\n\n\nStatusCode\n\n\n\n\n\n\nString\n\n\n\n\n\n\nStatus of the mobile signing process:\n\n\n\n\nREQUEST_OK\n \u2013 initial message was received;\n\n\nEXPIRED_TRANSACTION\n \u2013 timeout \u2013 the user did not enter the signing\n  PIN during given period of time;\n\n\nUSER_CANCEL\n \u2013 the user refused or cancelled the signing process;\n\n\nSIGNATURE\n \u2013 signature was created;\n\n\nNOT_VALID\n \u2013 signature created but not valid;\n\n\nOUTSTANDING_TRANSACTION\n \u2013 signing in process, please make new request;\n\n\nMID_NOT_READY\n \u2013 Mobile-ID functionality of the phone is not yet ready;\n\n\nPHONE_ABSENT\n \u2013 Delivery of the message was not successful, mobile phone is probably\n  switched off or out of coverage;\n\n\nSENDING_ERROR\n \u2013 other error when sending message (phone is incapable of receiving\n  the message, error in messaging server etc.);\n\n\nSIM_ERROR\n \u2013 SIM application error;\n\n\nREVOKED CERTIFICATE\n \u2013 certificate status revoked;\n\n\nINTERNAL_ERROR\n \u2013 technical error,\n\n\n\n\n\n\n\n\n\n\n\n\nSignedDocInfo\n\n\n\n\n\n\nSignedDocInfo\n\n\n\n\n\n\nIf \"ReturnDocInfo\" parameter in the GetSignedDocInfo request was set \"true\"\nthen \nSignedDocInfo\n structure will be returned in the format dessribed in\n\nSignedDocInfo\n.\n\n\n\n\n\n\n\n\n\n\nGetSignedDocInfo\n\n\nThe GetSignedDocInfo method shall be used to retrieve status information from the (signed) document in current signing session.\n\n\nRequest\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nR\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\nInteger\n\n\n+\n\n\nAn identifier of the active session\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nString\n\n\nOK\n or an error message\n\n\n\n\n\n\nSignedDocInfo\n\n\nSignedDocInfo\n\n\nXML structure according to the specification in \nSignedDocInfo\n of the document\n\n\n\n\n\n\n\n\nGetSignedDoc\n\n\nA signed document is returned from the webservice within the GetSignedDoc request. The content of the document is in HTMLencoded format. If there's a will to receive the document information in structured format in addition to signed document, the GetSignedDocInfo request should be used.\n\n\nIn case of BDOC-TS container, it has to contain at least one signature in order to obtain it, otherwise an error will be thrown.\n\n\nRequest\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nR\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\nInteger\n\n\n+\n\n\nAn identifier of the active session\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nString\n\n\nOK\n or an error message\n\n\n\n\n\n\nSignedDocData\n\n\nString\n\n\nThe signed document in the session. In case of DDOC the document is in XML format, in case of BDOC it's BASE64 encoded. As the XML tags has been transformed to HTML encoded format, therefore a HTMLDecode transduction should be done before saving the file in file system or to database. BDOC should be BASE64 decoded.\n\n\n\n\n\n\n\n\nGetDataFile\n\n\nGetDataFile request is for inquiring an original file out of a digitally signed file.\n\n\nFor instance if a digitally signed file is uploaded to the service within a StartSession request, it will be possible to read out every single original file with GetDataFile request.\n\n\nRequest\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nR\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\nInteger\n\n\n+\n\n\nAn identifier of the active session\n\n\n\n\n\n\nDataFileId\n\n\nString\n\n\n+\n\n\nAn identifier of a data file. In Dxx format, where xx stands for the sequence number. \nDataFileId\n is readable in \nSignedDocInfo\n structure. The structure is returned to the user of the service as a result of the \nStartSession\n or \nGetSignedDocInfo\n request.\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nString\n\n\nIf the request is successful, the value will be \u201eOK\".\n\n\n\n\n\n\nDataFileData\n\n\nDataFileInfo\n\n\nthe original file information in DataFileInfo structure.The structure of \nDataFileInfo\n is described in \nDataFileInfo\n. Data files are returned in the same format as they were sent to the service with StartSession or AddDataFile methods. It means that if the service was sent the content of the data file, the current method will return the block of datafile having the content of the data file in Base64 encoding in DfData field. In case that only hash was sent to the service, only the hash is returned by the method.\n\n\n\n\n\n\n\n\nIf you try to inquire a non-existing data file, you'll receive a SOAP error-object with error-message \"No such DataFile!\".\n\n\nRemoveDataFile\n\n\nRemoveDataFile\n request is for removing datafile from DigiDoc container. NB! Removing datafile is allowed when container to not have any signature. If container has one or more signatures, removing datafile is not possible.\n\n\nRequest\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nR\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\nInteger\n\n\n+\n\n\nAn identifier of the active session.\n\n\n\n\n\n\nDataFileId\n\n\nString\n\n\n+\n\n\nAn identifier of a data file. In Dxx format, where xx stands for the sequence number. \nDataFileId\n is readable in \nSignedDocInfo\n structure. The structure is returned to the user of the service as a result of the StartSession or \nGetSignedDocInfo\n request.\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nString\n\n\nIf the request is successful, the value will be \nOK\n.\n\n\n\n\n\n\nSignedDocInfo\n\n\nSignedDocInfo\n\n\nThe document in the session info after removing the datafile. \nSignedDocInfo\n structure will be returned in the format demonstrated in \nSignedDocInfo\n.\n\n\n\n\n\n\n\n\nIf removing the datafile is unsuccessful, a SOAP error-object will be returned with an error-message. Ie when you try to remove datafile from signed document error \"Cannot change a signed doc\" is returned.\n\n\nRemoveSignature\n\n\nRemoveSignature request enables to remove a signature from the digitally signed file in session. As a result of the request a SignedDocInfo without the removed signature is returned.\n\n\nRequest\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nR\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\nInteger\n\n\n+\n\n\nAn identifier of the active session.\n\n\n\n\n\n\nSignatureId\n\n\nString\n\n\n+\n\n\nA unique identifier of the signature. Identifications of signatures begin with \u201eS\" and the sequence number of the signature is followed (for example S0, S1 etc.). Identifications of the signatures of the session document are available in SignedDocInfo structure.This structure is returned to the service user for example as a result of the StartSession or GetSignedDocInfo request.\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nString\n\n\nIf the request is successful, the value will be \nOK\n.\n\n\n\n\n\n\nSignedDocInfo\n\n\nSignedDocInfo\n\n\nThe document in the session info after removing the signature. \nSignedDocInfo\n structure will be returned in the format demonstrated in \nSignedDocInfo\n.\n\n\n\n\n\n\n\n\nIf  removing the signature is unsuccessful, a SOAP error-object will be returned with an error-message.\n\n\nPotential error-messages:\n\n\n\n\nMust supply Signature id!\n \u2013 the identifier of the signatures is unassigned.\n\n\nNo such Signature!\n \u2013 no signature was found for the signature's identifier as a parameter of the request\n\n\n\n\nGetSignersCertificate\n\n\nA request for the certificate of the signer. The request allows the service user to read the signer's certificate from a DigiDoc file (to display to the user for example).\n\n\nRequest\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nR\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\nInteger\n\n\n+\n\n\nAn identifier of the active session.\n\n\n\n\n\n\nSignatureId\n\n\nString\n\n\n+\n\n\nA unique identifier of the signature. Identifications of signatures begin with \u201eS\" and the sequence number of the signature is followed (for example S0, S1 etc.). Identifications of the signatures of the session document are available in \nSignedDocInfo\n structure. The structure is returned to the service user for example as a result of the StartSession or \nGetSignedDocInfo\n request.\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nString\n\n\nIf the request is successful, the value will be \nOK\n.\n\n\n\n\n\n\nCertificateData\n\n\nString\n\n\nrequested certificate as a string in BASE64 encoding (in PEM format)\n\n\n\n\n\n\n\n\nIf returning the certificate is unsuccessful, a SOAP error-object will be returned with an error-message.\n\n\nPotential error-messages:\n\n\n\n\nMust supply Signature id!\n \u2013 the identifier of the signatures is unassigned.\n\n\nNo such Signature!\n \u2013 no signature was found for the signature's identifier as a parameter of the request\n\n\n\n\nGetNotarysCertificate\n\n\nAs a result of the request a validity confirmation signer's certificate of the signature is returned (OCSP server's certificate).\n\n\nRequest\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nR\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\nInteger\n\n\n+\n\n\nAn identifier of the active session.\n\n\n\n\n\n\nSignatureId\n\n\nString\n\n\n+\n\n\nA unique identifier of the signature. Identifications of signatures begin with \u201eS\" and the sequence number of the signature is followed (for example S0, S1 etc.). Identifications of the signatures of the session document are available in SignedDocInfo structure. The structure is returned to the service user for example as a result of the StartSession or GetSignedDocInfo request.\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nString\n\n\nIf the request is successful, the value will be \nOK\n.\n\n\n\n\n\n\nCertificateData\n\n\nString\n\n\nrequested certificate as a string in BASE64 encoding (in PEM format)\n\n\n\n\n\n\n\n\nIf returning the certificate is unsuccessful, a SOAP error-object will be returned with an error-message.\n\n\nPotential error-messages:\n\n\n\n\nMust supply Signature id!\n \u2013 the identifier of the signatures is unassigned.\n\n\nNo such Signature!\n \u2013 no signature was found for the signature's identifier as a parameter of the request\n\n\nNo notary for this Signature!\n \u2013 no validity confirmation for the signature as the request of the parameter.\n\n\n\n\nGetNotary\n\n\nThe request returns the validity confirmation of the certain signature.\n\n\nRequest\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nR\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\nInteger\n\n\n+\n\n\nAn identifier of the active session.\n\n\n\n\n\n\nSignatureId\n\n\nString\n\n\n+\n\n\nA unique identifier of the signature. Identifications of signatures begin with \u201eS\" and the sequence number of the signature is followed (for example S0, S1 etc.). Identifications of the signatures of the session document are available in \nSignedDocInfo\n structure. The structure is returned to the service user for example as a result of the StartSession or \nGetSignedDocInfo\n request.\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nString\n\n\nIf the request is successful, the value will be \nOK\n.\n\n\n\n\n\n\nOcspData\n\n\nString\n\n\nOCSP validity confirmation in Base64 encoding.\n\n\n\n\n\n\n\n\nIf returning the validity confirmation is unsuccessful,  a SOAP error-object will be returned with an error-message.\n\n\nPotential error-messages:\n\n\n\n\nMust supply Signature id!\n \u2013 the identifier of the signatures is unassigned.\n\n\nNo such Signature!\n \u2013 no signature was found for the signature's identifier as a parameter of the request\n\n\nNo notary for this Signature!\n \u2013 no validity confirmation for the signature as the request of the parameter.\n\n\n\n\nGetVersion\n\n\nThe request enables to check the service and to get to know it's version number.\n\n\nThe request has no parameters.\n\n\nResponse\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nName\n\n\nString\n\n\nName of the service (currently DigiDocService).\n\n\n\n\n\n\nVersion\n\n\nString\n\n\nThe version of the service in the form of x.x.x (for example 1.0.3)  The highest grade stands for major changes in the service, the second grade describes the changes which may eventuate in changing the protocol of the service. The last grade means some little fixes, which doesn't change the protocol.\n\n\n\n\n\n\nLibname\n\n\nString\n\n\nDigiDoc library name\n\n\n\n\n\n\nLibver\n\n\nString\n\n\nDigiDoc library version\n\n\n\n\n\n\n\n\nPrepareSignature\n\n\nThe request is used for digital signing preparation if signing with smartcard.\n\n\nAs a result of the request a new so called half-done signature is added to the DigiDoc conteiner in session and the unique identifier of the signature and the hash to be signed is returned. The hash should be forwarded to the signing module of the user's computer.\n\n\nRequest\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\n\n\n\n\nType\n\n\n\n\n\n\nR\n\n\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\n\n\n\n\nInteger\n\n\n\n\n\n\n+\n\n\n\n\n\n\nAn identifier of the active session.\n\n\n\n\n\n\n\n\n\n\nSignersCertificate\n\n\n\n\n\n\nString\n\n\n\n\n\n\n+\n\n\n\n\n\n\nsigner's certificate transferred to HEX string format (from binary (DER) format). Mostly the\nsigning software (signing component) in the user's computer delivers the certificate in a\nproper format.\n\n\n\n\n\n\n\n\n\n\nSignersTokenId\n\n\n\n\n\n\n\nString\n\n\n\n\n\n\n\n+\n\n\n\n\n\n\n\nidentifier of the private key's slot on a smartcard. The signing software defines it's value\nwithin reading the signer's certificate and forwards it to the signing application.\n\n\n\n\n\n\n\n\n\n\nRole\n\n\n\n\n\n\nString\n\n\n\n\n\n\n-\n\n\n\n\n\n\nThe text of the role or resolution defined by the user.\n\n\n\n\n\n\n\n\n\n\nCity\n\n\n\n\n\n\nString\n\n\n\n\n\n\n-\n\n\n\n\n\n\nName of the city, where it's signed\n\n\n\n\n\n\n\n\n\n\nState\n\n\n\n\n\n\nString\n\n\n\n\n\n\n-\n\n\n\n\n\n\nName of the state, where it's signed.\n\n\n\n\n\n\n\n\n\n\nPostalCode\n\n\n\n\n\n\nString\n\n\n\n\n\n\n-\n\n\n\n\n\n\nPostal code of the signing location.\n\n\n\n\n\n\n\n\n\n\nCountry\n\n\n\n\n\n\nString\n\n\n\n\n\n\n-\n\n\n\n\n\n\nName of the country, where it's signed.\n\n\n\n\n\n\n\n\n\n\nSigningProfile\n\n\n\n\n\n\nString\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\nLT_TM\n (Long Term with Time Mark): a profile for BDOC-TM (a BDOC signature with time-mark)\n  and DDOC.\n\n\nLT\n (Long Term): Used for creating standard BDOC-TS (BDOC with time-stamp / ASiC-E) signatures.\n\n\n\n\n\n\n\n\n\n\n\n\nUsually the signing application asks the user about the location information of the signing and forwards it to DigiDocService. Inserting the information about role and signing location is voluntary.\n\n\nResponse\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nString\n\n\nIf the request is successful, the value will be \u201eOK\".\n\n\n\n\n\n\nSignatureId\n\n\nString\n\n\nthe unique identifier of the signature. Identifications of signatures begin with \u201eS\" and the sequence number of the signature is followed (for example S0, S1 etc.). The identifier could be used later to remove the signature or request for signature attributes (signer's certificate, OCSP certificate, OCSP validity confirmation).\n\n\n\n\n\n\nSignedInfoDigest\n\n\nString\n\n\nThe hash to be signedas a hexadecimal string.\n\n\n\n\n\n\n\n\nIf returning the validity confirmation is unsuccessful,  a SOAP error-object will be returned with an error-message.\n\n\nPotential error-messages:\n\n\n\n\nMust supply Signature certificate!\n \u2013 the value of the signer's certificate is empty.\n\n\n\n\nFinalizeSignature\n\n\nThe request is used for finalizing the digital signing while signing with smartcard.\n\n\nWith FinalizeSignature request the signature prepared at PrepareSignature step is finished. A digitally signed signature is added to DigiDoc file and an OCSP validity confirmation is taken.\n\n\nRequest\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nR\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\nInteger\n\n\n+\n\n\nAn identifier of the active session.\n\n\n\n\n\n\nSignatureId\n\n\nString\n\n\n+\n\n\nThe unique identifier of the signature which was returned as the result of PrepareSignaturemethod\n\n\n\n\n\n\nSignatureValue\n\n\nString\n\n\n+\n\n\nValue of the signature (signed hash)as a HEX string. The signing software  returns the value.\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nString\n\n\nIf the request is successful, the value will be \u201eOK\".\n\n\n\n\n\n\nSignedDocInfo\n\n\nSignedDocInfo\n\n\nThe document in the session info after adding the signature. SignedDocInfo structure will be returned in the format demonstrated in \nSignedDocInfo\n.\n\n\n\n\n\n\n\n\nMobileCreateSignature\n\n\nThis request is used for creating additional signature to the DigiDoc file. The \"\n\" block is returned as a result and the \nApplication Provider shall take care of inserting this block into DigiDoc file.\n\n\nThe request is built for one-step creation of mobile signature. The method takes care of acquiring of signer's certificate, validity \nconfirmation and RFC3161-type timestamps if needed in addition to getting mobile signature from the user.\n\n\nThere is no need to create independent session with StartSession method when using MobileCreateSignature method. If session-based procedure is \nneeded, MobileSign method should be used instead.\n\n\n\n\nNB! Container formats DIGIDOC-XML 1.3 and BDOC 2.1 are supported. If an inappropriate combination of given format and version number is used \nin request parameters, a SOAP error object with error message \" \nInvalid format and version combination!\n\" will be returned.\n\n\n\n\nRequest\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\n\n\n\n\nType\n\n\n\n\n\n\nR\n\n\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIDCode\n\n\n\n\n\n\n\nString\n\n\n\n\n\n\n\n+\n\n\n\n\n\n\n\nPersonal Identification Code of the userIt is recommended to use both input parameters \nIDCode\n\nand PhoneNo! In case of Lithuanian Mobile-ID users IDCode and PhoneNo are mandatory.\n\n\n\n\n\n\n\n\n\n\nSignersCountry\n\n\n\n\n\n\nString(2)\n\n\n\n\n\n\n-\n\n\n\n\n\n\nCountry of origin. ISO 3166-type 2-character country codes are used (e.g. \nEE\n)\n\n\n\n\n\n\n\n\n\n\nPhoneNo\n\n\n\n\n\n\nString\n\n\n\n\n\n\n+\n\n\n\n\n\n\nUser's phone number with country code in form +xxxxxxxxx (e.g. +3706234566). If both PhoneNo\nand IDCode parameters are given, correspondence between personal code and phone number is\nverified and in case of inconsistency SOAP error code 301 is returned. It is recommended to use\nboth input parameters IDCode and PhoneNo! In case of Lithuanian Mobile-ID users IDCode and\nPhoneNo are mandatory (see \nStartig Mobile-ID operations\n).\nIf the element \"PhoneNo\" has been set, the country\nattribute set in the prefix is used (independent on the value of the element \"SignersCountry\").\n\n\n\n\n\n\n\n\n\n\nLanguage\n\n\n\n\n\n\n\nString(3)\n\n\n\n\n\n\n\n+\n\n\n\n\n\n\n\nLanguage for user dialog in mobile phone. 3-character capitalized acronyms are used.\nPossible values: \nENG\n, \nEST\n, \nRUS\n. \nLIT\n.\n\n\n\n\n\n\n\n\n\n\nServiceName\n\n\n\n\n\n\n\nString(20)\n\n\n\n\n\n\n\n+\n\n\n\n\n\n\n\nName of the service \u2013 previously agreed with Application Provider and DigiDocService operator.\nMaximum length \u2013 20 chars.\n\n\n\n\n\n\n\n\n\n\nMessageToDisplay\n\n\n\n\n\n\nString(40 bytes)\n\n\n\n\n\n\n-\n\n\n\n\n\n\nText displayed in addition to ServiceName and before asking authentication PIN. Maximum\nlength is 40 bytes. In case of Latin letters, this means also a 40 character long text, but\nCyrillic characters may be encoded by two bytes and you will not be able to send more than\n20 symbols.\n\n\n\n\n\n\n\n\n\n\nRole\n\n\n\n\n\n\nString\n\n\n\n\n\n\n-\n\n\n\n\n\n\nRole or resolution of the signature\n\n\n\n\n\n\n\n\n\n\nCity\n\n\n\n\n\n\nString\n\n\n\n\n\n\n-\n\n\n\n\n\n\nCity where the signature is created\n\n\n\n\n\n\n\n\n\n\nStateOrProvince\n\n\n\n\n\n\nString\n\n\n\n\n\n\n-\n\n\n\n\n\n\nState or province where the signature is created\n\n\n\n\n\n\n\n\n\n\nPostalCode\n\n\n\n\n\n\nString\n\n\n\n\n\n\n-\n\n\n\n\n\n\nPostal code of the place where the signature is created\n\n\n\n\n\n\n\n\n\n\nCountryName\n\n\n\n\n\n\nString\n\n\n\n\n\n\n-\n\n\n\n\n\n\nCountry where the signature is created\n\n\n\n\n\n\n\n\n\n\nSigningProfile\n\n\n\n\n\n\nString\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\nLT_TM\n (Long Term with Time Mark): a profile for BDOC-TM (a BDOC signature with time-mark)\n  and DDOC. \nLT_TM\n is currently the default option.\n\n\nLT\n (Long Term): Used for creating standard BDOC-TS signatures (BDOC with time-stamp / ASiC-E);\n  it is supported for the BDOC container format.\n\n\n\n\n\n\n\n\n\n\n\n\nDatafiles\n\n\n\n\n\n\nList\n\n\n\n\n\n\n+\n\n\n\n\n\n\nList of the files to be signed. Every element has following fields:\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\n\n\n\n\nR\n\n\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nId\n\n\n\n\n\n\n+\n\n\n\n\n\n\nunique identifier for the file. In case of DIGIDOC-XML format, the\nidentifiers of the data files start with \u201eD\" followed by a sequential\nnumber of the file.\nIn case of BDOC format a unique file name is transferred.\n\n\n\n\n\n\n\n\n\n\nDigestType\n\n\n\n\n\n\n\n+\n\n\n\n\n\n\n\nhash algorithm identifier. In case of DIGIDOC-XML format the supported\ntype is \"sha1\". In cased of BDOC format, the recommended type is \"sha256\".\n\n\n\n\n\n\n\n\n\n\nDigestValue\n\n\n\n\n\n\n+\n\n\n\n\n\n\nhash value of the data file in BASE64 encoding. In case of DIGIDOC-XML\nformat, hash is calculated over DigiDoc \n element canonic form.\nPlease see \nStartSession\n how to calculate hash\nover data file and send it to\nthe service. For the BDOC form, hash is calculated over the binary datafile\ncontents and then is encoded in Base64.\n\n\n\n\n\n\n\n\n\n\nMimeType\n\n\n\n\n\n\n-\n\n\n\n\n\n\nType of the data file. In case of BDOC, the default\nvalue is \napplication/octet-stream\n.\nNote! In case of BDOC, it is very important that in the container the\nmanifest.xml file contains the same MimeType for this file.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFormat\n\n\n\n\n\n\nString\n\n\n\n\n\n\n+\n\n\n\n\n\n\nFormat identifier for the signed file, shall equal to  \"DIGIDOC-XML\" and \"BDOC\".\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\n\n\n\n\n\nString\n\n\n\n\n\n\n\n+\n\n\n\n\n\n\n\nFormat version of the undersigned file (In case of DIGIDOC-XML, the supported version is \"1.3\",\nin case of BDOC, it is \"2.1\").\n\n\n\n\n\n\n\n\n\n\nSignatureID\n\n\n\n\n\n\nString\n\n\n\n\n\n\n+\n\n\n\n\n\n\n\n\nIdentifier of the signature. The Application Provider shall detect identifier of the\n  latest signature and increment this value by one. For example, if last signature has ID of\n  value \"S2\", the value of this parameter should be \"S3\".\n\n\nIn case the document has no signatures, the value should be \"S0\".\n\n\n\n\n\n\n\n\n\n\n\n\nMessagingMode\n\n\n\n\n\n\n\n\n+\n\n\n\n\n\n\nMode to be used to response for MobileCreateSignature query. Options are:\n\n\n\n\nasynchClientServer\n \u2013 Appliaction Provider will make repeated status queries.\n\n\nasynchServerServer\n \u2013 the response will be sent to the Application Provider\n  by DigiDocService. This requires Application Provider to provide interface for\n  recieving these asynchronous responses.\n\n\n\n\n\n\n\n\n\n\n\n\nAsyncConfiguration\n\n\n\n\n\n\nInteger\n\n\n\n\n\n\n-\n\n\n\n\n\n\nThis parameter is required when using \"asynchServerServer\" messaging mode and identifies\nconfiguration mode. This value has to be previously agreed. Currently,\n\nJava Message Services\n (JMS) interface is supported.\n\n\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\nInteger\n\n\nIdentificator of the active session\n\n\n\n\n\n\nChallengeID\n\n\nString\n\n\n4-character control code calculated on basis of  the Challenge value to be signed. This code is displayed on mobile phone's screen and shall be also displayed by Application Provider in order to ensure the user on authencity of the query.\n\n\n\n\n\n\nStatus\n\n\nString\n\n\n\u201eOK\" when no errors. In case of an error, SOAB error object is returned according to the specification in \nSOAP Error Messages\n of the current document.\n\n\n\n\n\n\n\n\nIf asynchClientServer messaging mode is used then GetMobileCreateSignatureStatus query shall be sent after getting a positive response.\n\n\nNB! It is reasonable to wait ~10 seconds before starting sending status queries  - it is improbable that message from user's phone arrives earlier because of technical and human limitations. Mobile-ID transactions will time out in 4 minutes or less.\n\n\nIn case asynchServerServer messaging mode, a message will be sent to the Application Provider in accordance of previously agreed configuration. This XML message has a following structure:\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\nInteger\n\n\nIdentifier of the current active session\n\n\n\n\n\n\nStatus\n\n\nString\n\n\nStatus code. \"SIGNATURE\" in case of successful signing. Other possible status codes are described in GetMobileSignatureStatus responses.\n\n\n\n\n\n\nData\n\n\nString\n\n\nThe resulting \n block in pure XML.\n\n\n\n\n\n\n\n\nGetMobileCreateSignatureStatus\n\n\nThe method is used to query status information when using asynchClientServer mobile signing mode.\n\n\nRequest\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nR\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\nInteger\n\n\n+\n\n\nSession identifier\n\n\n\n\n\n\nWaitSignature\n\n\nBoolean\n\n\n+\n\n\nIf \"True\", the response is not returned to the request before the signature value has arrived from the phone or an error has occurred.  If \"False\", the response will be returned immediately and the Application provider has to repeat the request after some time (preferably in 2-10 seconds).\n\n\n\n\n\n\n\n\nResponse:\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\n\n\n\n\nType\n\n\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\n\n\n\n\nInteger\n\n\n\n\n\n\nSession identifier\n\n\n\n\n\n\n\n\n\n\nStatus\n\n\n\n\n\n\nString\n\n\n\n\n\n\nProcess status:\n\n\n\n\nREQUEST_OK\n \u2013 the original message was successfully received;\n\n\nEXPIRED_TRANSACTION\n \u2013 service timed out before user managed to complete the signing;\n\n\nUSER_CANCEL\n \u2013 user cancelled the action;\n\n\nSIGNATURE\n \u2013 signature was successfully created;\n\n\nOUTSTANDING_TRANSACTION\n \u2013 authentication is still on the way, the status query shall be repeated;\n\n\nMID_NOT_READY\n \u2013 the Mobile-ID of the SIM is not yet ready for the operations;\n\n\nPHONE_ABSENT\n \u2013 phone is switched off or out of coverage;\n\n\nSENDING_ERROR\n \u2013 other error when sending message (phone is incapable of receiving the\n  message, error in messaging server etc.);\n\n\nSIM_ERROR\n \u2013 SIM application error;\n\n\nNOT_VALID\n -  signature is not valid\n\n\nREVOKED_CERTIFICATE\n \u2013 certificate revoked\n\n\nINTERNAL_ERROR\n \u2013 technical error.\n\n\n\n\n\n\n\n\n\n\n\n\nSignature\n\n\n\n\n\n\n\nString\n\n\n\n\n\n\n\nSignature value in PKCS#1 container in BASE64 encoding. Can be either an RSA or ECDSA signature,\ndepending on the signer's certificate returned with the signature block.\n\n\n\n\n\n\n\n\n\n\nIs the value in Status field is not OUTSTANDING_TRANSACTION then active session is closed after this request.\n\n\nGetMobileCertificate\n\n\nThe method is used to request user's certificates.\n\n\n\n\nNB!\n The usage of this method is limited (IP-address based access).  It is necessary to request the separate access from SK with clear argument why it is needed.\n\n\n\n\nRequest\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\n\n\n\n\nType\n\n\n\n\n\n\nR\n\n\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIDCode\n\n\n\n\n\n\nString\n\n\n\n\n\n\n+\n\n\n\n\n\n\nPersonal Identification Code of the user\n\n\n\n\n\n\n\n\n\n\nCountry\n\n\n\n\n\n\nString(2)\n\n\n\n\n\n\n-\n\n\n\n\n\n\nCountry of origin. ISO 3166-type 2-character country codes are used (e.g. EE)\n\n\n\n\n\n\n\n\n\n\nPhoneNo\n\n\n\n\n\n\nString\n\n\n\n\n\n\n+\n\n\n\n\n\n\nUser's phone number with country code in form +xxxxxxxxx (e.g. +3706234566). If both PhoneNo\nand IDCode parameters are given, correspondence between personal code and phone number is\nverified and in case of inconsistency SOAP error code 301 is returned. If the element \"PhoneNo\"\nhas been set, the country attribute set in the prefix is used (independent on the value of the\nelement \"Country\").\n\n\n\n\n\n\n\n\n\n\nReturnCertData\n\n\n\n\n\n\nString\n\n\n\n\n\n\n+\n\n\n\n\n\n\nDetermines whether and which certificate(s) to return in the response (status info is\nreturned in any case):\n\n\n\n\nauth\n \u2013 request for default authentication certificate;\n\n\nauthRSA\n \u2013 request for authentication RSA certificate, if available;\n\n\nauthECC\n \u2013 request for authentication ECC certificate, if available;\n\n\nsign\n \u2013 request for default certificate for digital signing;\n\n\nsignRSA\n \u2013 request for RSA certificate for digital signing, if available; signECC \u2013 request\n  for ECC certificate for digital signing, if available;\n\n\nboth\n \u2013 request for both (authentication and digital signing) default certificates;\n\n\nbothRSA\n \u2013 both RSA certificates; \"bothECC\" \u2013 both ECC certificates;\n\n\n\"none\n \u2013 none.\n\n\n\n\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAuthCertStatus\n\n\nString\n\n\nOK \u2013 the authentication certificate has not expired. Note that the certificate may still be inactive for other reasons (it may be revoked by its owner).REVOKED \u2013 certificate has expired. The application provider may additionally ask for definitive certificate status by using an OCSP service (for example using the \"CheckCertificate\" operation).\n\n\n\n\n\n\nSignCertStatus\n\n\nString\n\n\nOK \u2013 the signing certificate has not expired. Note that the certificate may still be inactive for other reasons (it may be revoked by its owner).REVOKED \u2013 certificate has expired. The application provider may additionally ask for definitive certificate status by using an OCSP service (for example using the \"CheckCertificate\" operation).\n\n\n\n\n\n\nAuthCertData\n\n\nString\n\n\nAuthentication certificate in PEM form\n\n\n\n\n\n\nSignCertData\n\n\nString\n\n\nDigital signing certificate in PEM form\n\n\n\n\n\n\n\n\nIf the user does not possess Mobile-ID SIM, SOAP fault is returned in accordance with p 9.4.\n\n\nMobileSignHash\n\n\nThis operation starts the process of signing a hash using Mobile-ID. It is meant for signing document formats other than DDOC and BDOC (for example: PDF, ADOC, etc.) For BDOC and DDOC formats, it is recommended to use the MobileCreateSignature and MobileSign operations.\n\n\nIf it is necessary to fetch signer's certificate before signing (for example, to incorporate the certificate in the document prior to signing), the GetMobileCertificate operation can be used.\n\n\nThis operation locates the signer's certificate and sends the signing request to the signer's mobile device (since 3.10 MobileSignHash doesn't request for OCSP). An active session is not required.\n\n\nThe status of the hash signing process is checked in ClientServer mode with the GetMobileSignHashStatusV2 operation. Note! Before sending the first status request, it is recommended to wait at least 10 seconds, as the signing process cannot finish faster due to human and technology factors. Mobile-ID transactions will time out in 4 minutes or less.\n\n\nThis operation is using the document/literal style and is accessible from \nhttps://digidocservice.sk.ee/v2/mid.wsdl\n.  New version of the service uses a separate WSDL, and error message format has been updated (see \nSOAP Error messages\n).\n\n\n\n\nNOTE\n: The usage of this method is limited (IP-address based access).  It is necessary to request the separate access permissions for using it.\n\n\n\n\nRequest\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nR\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nIDCode\n\n\nString\n\n\n+\n\n\nPersonal Identification Code of the user\n\n\n\n\n\n\nPhoneNo\n\n\nString\n\n\n+\n\n\nPhone number of the certificate number complete with the country code in the form +xxxxxxxxx (e.g. +3706234566).A match between the phone number and the ID-code will be checked and in case on non-compliance a SOAP error code 301 will be returned,\n\n\n\n\n\n\nLanguage\n\n\nString(3)\n\n\n+\n\n\nLanguage of the messages displayed on user's phone. ISO 3166 3-letter codes are being used. Possible values are: EST, ENG, LIT and RUS.\n\n\n\n\n\n\nMessageToDisplay\n\n\nString(40)\n\n\n-\n\n\nText displayed in addition to ServiceName and before asking authentication PIN. Maximum length is 40 bytes. In case of Latin letters, this means also a 40 character long text, but Cyrillic characters may be encoded by two bytes and you will not be able to send more than 20 symbols.\n\n\n\n\n\n\nServiceName\n\n\nString(20)\n\n\n+\n\n\nName of the service \u2013 previously agreed with Application Provider and DigiDocService operator. Maximum length \u2013 20 chars.\n\n\n\n\n\n\nHash\n\n\nString(128)\n\n\n+\n\n\nA hash to be signed. Transferred as a HEX string.\n\n\n\n\n\n\nHashType\n\n\nEnumeration\n\n\n+\n\n\nA hash type to be signed. SHA1, SHA256 and SHA512 hashes are currently supported.\n\n\n\n\n\n\nKeyID\n\n\nString\n\n\n-\n\n\nKey type used for signing. RSA and ECC keys are currently supported.\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\nString\n\n\nIdentifier of the session.\n\n\n\n\n\n\nChallengeID\n\n\nString\n\n\n- 4 (number) character control code, which is calculated on a basis of Challenge value that will be sent to the user's phone for signing.- 40 characters long HEX i.e. hash Challenge to be signed. Will be used only in case of Bite MSSP operator.This control code shall be displayed to the user by the application; with this it will be possible for the user to prove the authenticity of the request.NOTE: Application must prompt the user to check the compatibility of the control code displayed in the application and on the phone screen.\n\n\n\n\n\n\nStatus\n\n\nString\n\n\n\"OK\" if the procedure was performed successfully. If method call-up will result with an error, a SOAP error object will be returned.\n\n\n\n\n\n\n\n\nIf method call-up will result with an error, a SOAP error object will be returned according to the description in \nSOAP Error messages\n.\n\n\nGetMobileSignHashStatusRequest\n\n\nThe method is used to query status information when using asynchClientServer mobile signing mode.\n\n\nThis operation returns the status of the hash signing operation and, in the case of successful signing, the signature, signer's certificate and revocation data about the certificate.\n\n\nRequest\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nR\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\nString(20)\n\n\n+\n\n\nIdentifier of the session.\n\n\n\n\n\n\nWaitSignature\n\n\nBoolean\n\n\n-\n\n\nIf \"True\", the response is not returned to the request before the signature value has arrived from the phone or an error has occurred.  If \"False\", the response will be returned immediately and the Application provider has to repeat the request after some time (preferably in 2-10 seconds).\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\n\n\n\n\nType\n\n\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSesscode\n\n\n\n\n\n\nString\n\n\n\n\n\n\nIdentifier of the session.\n\n\n\n\n\n\n\n\n\n\nStatus\n\n\n\n\n\n\nString\n\n\n\n\n\n\nProcess status:\n\n\n\n\nOUTSTANDING_TRANSACTION\n \u2013 authentication is still on the way, the status\n\n\nSIGNATURE\n \u2013 signature was successfully created;\n\n\nNOT_VALID\n \u2013 the action is completed but the signature created is not valid;\n\n\nEXPIRED_TRANSACTION\n \u2013 service timed out before user managed to complete the signing;\n\n\nUSER_CANCEL\n \u2013 user cancelled the action;\n\n\nquery shall be repeated;\n\n\nMID_NOT_READY\n \u2013 the Mobile-ID of the SIM is not yet ready for the operations;\n\n\nPHONE_ABSENT\n \u2013 phone is switched off or out of coverage;\n\n\nSENDING_ERROR\n \u2013 other error when sending message (phone is incapable of\n  receiving the message, error in messaging server etc.);\n\n\nSIM_ERROR\n \u2013 SIM application error;\n\n\nINTERNAL_ERROR\n \u2013 technical error\n\n\nREVOKED_CERTIFICATE\n \u2013 certificate revoked or suspended\n\n\nOCSP UNAUTHORIZED\n - the client who is using the service does not have\n  access to validity confirmation service of OCSP used by DigiDocService.\n\n\n\n\n\n\n\n\n\n\n\n\nSignature\n\n\n\n\n\n\nString\n\n\n\n\n\n\nSigned hash in a PKC1 / PKCS13 container. (Will be returned\nonly if Status == \nSIGNATURE\n). Can be either a RSA or an ECDSA signature, depending\non the returned certificate in the \"CertificateData\" field.\n\n\n\n\n\n\n\n\n\n\nRevocationData\n\n\n\n\n\n\nString\n\n\n\n\n\n\nValidity information of the certificate (PEM format)\n\n\n\n\n\n\n\n\n\n\nCertificateData\n\n\n\n\n\n\nString\n\n\n\n\n\n\nCertificate in PEM format, encoded in Base64.\n\n\n\n\n\n\n\n\n\n\nIf method call-up will result with an error, a SOAP error object will be returned according to the description in \nSOAP Error messages\n.\n\n\nData structures\n\n\n\n\nNB!\n When sending requests, special characters in XML element value must be escaped!  \n\n\n\n\n\n\n\n\n\n\nSpecial character\n\n\nConvert to\n\n\n\n\n\n\n\n\n\n\n\"\n\n\nquot;\n\n\n\n\n\n\n'\n\n\napos;\n\n\n\n\n\n\n\n\nlt;\n\n\n\n\n\n\n\n\ngt;\n\n\n\n\n\n\n\n\namp;\n\n\n\n\n\n\n\n\nSignedDocInfo\n\n\nPresents the structure of a DigiDoc file (container).\n\n\n\n\nFormat\n \u2013 File format for the signed container (DIGIDOC-XML and BDOC are supported currently).\n\n\nVersion\n - The version of a signed file format (in case of DIGIDOC-XML the \n  versions 1.1, 1.2, 1.3; in case of BDOC the version 2.1).\n\n\nDataFileInfo \u2013\n Information about the files in container. The data structure is described in \nDataFileInfo\n in the current \n  document. A DataFileInfo section may appear 0..n times in an SignedDocInfo section, depending on the number of data files.\n\n\nSignatureInfo\n \u2013 Contains the info of the signatures in the signed file. This section may appear 0..n times depending on the number of signatures. Contains the following attributes:\n\n\nId \u2013\n The unique signature's identifier within the current document/transaction. Signatures' identifiers begin with \u201eS\" and the signature's sequence number is followed.\n\n\nStatus\n \u2013 Signature's status information. A signature will be valid, if the value of the attribute is \u201eOK\". If a signature is invalid, the value \n  of the attribute will be \u201eError\" and more precise error information is presented in the Error-element. If the signature is valid, but doesn't completely \n  correspond to the container's specification, the value of this element is \"OK\", while the Error-element has a description of the warning returned by the DigiDoc library.\n\n\nError\n \u2013 Contains the error information discovered during the signature validation check. Contains following attributes:\n\n\ncode\n \u2013 Error code;\n\n\ncategory\u2013\n Error category. There are 3 error categories:\n\n\nTECHNICAL\n \u2013 technical issue;\n\n\nUSER\n \u2013 issue caused by user;\n\n\nLIBRARY\n \u2013 internal error of the DigiDoc library.\n\n\nWARNING\n \u2013 A warning from the DigiDoc library. Legally, the signature is valid, but additional changes are not allowed in the container. For more information, see \nContainer validation\n.  \n\n\ndescription \u2013\n Error description in English.\n\n\n\n\n\n\nSigningTime\n \u2013 Local time (for example, time of the signer's computer, time of signing web server) of signing according to the \"\n  The W3C note \nDate and Time Formats\"\n [5]. NB! This is not the official time of signing. The official time is defined for DDOC and BDOC-TM in current structure\n  element \nConfirmation-\n ProducedAt\n and for BDOC-TS/ASiC-E in current structure element \nTimestamps-\n CreationTime\n.\n\n\nSignerRole\n - The role or resolution marked by the signer at signing. Assigned by following attributes:\n\n\nCertified\n - Defines, whether the role has been assigned by the signer itself or by the CA. Only user-defined roles are in use currently, where the parameter value is 0.\n\n\nRole\n - The text of the role or resolution.\n\n\n\n\n\n\nSignatureProductionPlace\n - The data, belonging to signature's attributes, describes the place of signing. Those fields are not required in signing.\n\n\nCity\n \u2013 Name of the city, where it's signed.\n\n\nStateOrProvince\n \u2013 Name of the state/province, where it's signed.\n\n\nPostalCode\n \u2013 Postal code of the signing location.\n\n\nCountryName\n \u2013 Name of the country, where it's signed.\n\n\n\n\n\n\nSigner\n \u2013 Information about the signer including the following attributes:\n\n\nCommonName\n \u2013 Name of the signer, taken from the signer certificate's Subject field's CN parameter.\n\n\nIDCode\n \u2013Identification number of the signer, taken from the signer certificate's Subject field's Serial Number parameter.\n\n\nCertificate\n \u2013 Main information of the certificate used for signing according to the current document's \nCertificateInfo\n.\n\n\n\n\n\n\nConfirmation \u2013\n OCSP validity confirmation's data structure. Every correct and valid signature contains a structure of a validity confirmation. Confirmation section contains the following attributes:\n\n\nResponderID\n \u2013 Distinguish name of the OCSP validity confirmation server (OCSP Responder ID)\n\n\nProducedAt\n \u2013 Validity Confirmation obtaining time according to the \"The W3C note \nDate and Time Formats\"\n [5] (f.e._\"_09.14T21:00:00Z\"). This time is counted as the official signing time.\n\n\nResponder Certificate\n - Certificate of the validity confirmation service (OCSP) server according to the format described in current document \nCertificateInfo\n.\n\n\n\n\n\n\nTimestamps \u2013\n Information about the RFC3161 timestamps that are related to the signature. It will be outputted only in case of BDOC-TS/ASiC-E containers. Timestamps section contains the following attributes:\n\n\nId\n \u2013 Currently not included.\n\n\nType\n - The type of the timestamp. The value for signature's timestamp is always \nSIGNATURE\\_TIMESTAMP\n.\n\n\nSerialNumber\n - Currently not included.\n\n\nCreationTime\n - the generation time of the the signature's timestamp (f.e. \"2014-11-11T15:00:00Z\").\n\n\nPolicy\n - Currently not included.\n\n\nErrorbound\n - Currently not included.\n\n\nOrdered\n - Currently it is always set to \"false\".\n\n\nTSA\n - Currently not included.\n\n\nCertificate\n - Main information of the certificate used for signing the timestamp according to the current document's \nCertificateInfo\n.\n\n\n\n\n\n\nCRLInfo\n - Information about signature related revocation list.  The revocation revocation list related functionality is not realized in the service version.\n\n\n\n\n\n\n\n\nSample of structure\n\n\nSignedDocInfo xsi:type=\nd:SignedDocInfo\n\n    \nformat xsi:type=\nxsd:string\n/format\n\n    \nversion xsi:type=\nxsd:string\n/version\n\n    \nDataFileInfo xsi:type=\nd:DataFileInfo\n\n        \nId xsi:type=\nxsd:string\n/Id\n\n        \nFilename xsi:type=\nxsd:string\n/Filename\n\n        \nMimeType xsi:type=\nxsd:string\n/MimeType\n\n        \nContentType xsi:type=\nxsd:string\n/ContentType\n\n        \nSize xsi:type=\nxsd:int\n0\n/Size\n\n        \nDigestType xsi:type=\nxsd:string\n/DigestType\n\n        \nDigestValue xsi:type=\nxsd:string\n/DigestValue\n\n    \n/DataFileInfo\n\n    \nSignatureInfo xsi:type=\nd:SignatureInfo\n\n        \nId xsi:type=\nxsd:string\n/Id\n\n        \nStatus xsi:type=\nxsd:string\n/Status\n\n        \nError xsi:type=\nd:Error\n\n            \ncode xsi:type=\nxsd:int\n0\n/code\n\n            \ncategory xsi:type=\nxsd:string\n/category\n\n            \ndescription xsi:type=\nxsd:string\n/description\n\n        \n/Error\n\n        \nSigningTime xsi:type=\nxsd:string\n/SigningTime\n\n        \nSignerRole xsi:type=\nd:SignerRole\n\n            \ncertified xsi:type=\nxsd:int\n0\n/certified\n\n            \nRole xsi:type=\nxsd:string\n/Role\n\n        \n/SignerRole\n\n        \nSignatureProductionPlace si:type=\nd:SignatureProductionPlace\n\n            \nCity xsi:type=\nxsd:string\n/City\n\n            \nStateOrProvince xsi:type=\nxsd:string\n/StateOrProvince\n\n            \nPostalCode xsi:type=\nxsd:string\n/PostalCode\n\n            \nCountryName xsi:type=\nxsd:string\n/CountryName\n\n        \n/SignatureProductionPlace\n\n        \nSigner xsi:type=\nd:SignerInfo\n\n            \nCommonName xsi:type=\nxsd:string\n/CommonName\n\n            \nIDCode xsi:type=\nxsd:string\n/IDCode\n\n            \nCertificate xsi:type=\nd:CertificateInfo\n\n                \nIssuer xsi:type=\nxsd:string\n/Issuer\n\n                \nSubject xsi:type=\nxsd:string\n/Subject\n\n                \nValidFrom xsi:type=\nxsd:string\n/ValidFrom\n\n                \nValidTo xsi:type=\nxsd:string\n/ValidTo\n\n                \nIssuerSerial xsi:type=\nxsd:string\n/IssuerSerial\n\n                \nPolicies xsi:type=\nd:CertificatePolicy\n\n                    \nOID xsi:type=\nxsd:string\n/OID\n\n                    \nURL xsi:type=\nxsd:string\n/URL\n\n                    \nDescription xsi:type=\nxsd:string\n/Description\n\n                \n/Policies\n\n            \n/Certificate\n\n        \n/Signer\n\n        \nConfirmation xsi:type=\nd:ConfirmationInfo\n\n            \nResponderID xsi:type=\nxsd:string\n/ResponderID\n\n            \nProducedAt xsi:type=\nxsd:string\n/ProducedAt\n\n            \nResponderCertificate xsi:type=\nd:CertificateInfo\n\n                \nIssuer xsi:type=\nxsd:string\n/Issuer\n\n                \nSubject xsi:type=\nxsd:string\n/Subject\n\n                \nValidFrom xsi:type=\nxsd:string\n/ValidFrom\n\n                \nValidTo xsi:type=\nxsd:string\n/ValidTo\n\n                \nIssuerSerial xsi:type=\nxsd:string\n/IssuerSerial\n\n                \nPolicies xsi:type=\nd:CertificatePolicy\n\n                    \nOID xsi:type=\nxsd:string\n/OID\n\n                    \nURL xsi:type=\nxsd:string\n/URL\n\n                \nDescription xsi:type=\nxsd:string\n/Description\n\n                \n/Policies\n\n            \n/ResponderCertificate\n\n        \n/Confirmation\n\n    \n/SignatureInfo\n\n\n/SignedDocInfo\n\n\n\n\n\nCertificateInfo\n\n\nData structure which includes the main fields of the certificate. Used for describing the information of the certificate of the signer and the information of the certificate of the validity confirmation.\n\n\nContains the following attributes:\n\n\n\n\nIssuer\n \u2013 The distinguished name of the certificate issuer.\n\n\nIssuerSerial\n \u2013 The certificate's serial number.\n\n\nSubject\n \u2013 The distinguished name of the certificate.\n\n\nValidForm\n \u2013 The certificate's period of validity according to The W3C note \nDate and Time Formats\n _[5] (for example \"_09.14T21:00:00Z\").\n\n\nValidTo\n \u2013 The expiration time of the certificate according to The W3C note \nDate and Time Formats\n \n[5]\n\n\nPolicies\n \u2013 Structure of signing policies, may appear 0..n times.\n\n\nOID\n \u2013 The unique identifier of signing policies.\n\n\nURL\n - The reference to signing policies (used on company certificates primly).\n\n\nDescription\n - A short description of signing policies.\n\n\n\n\n\n\n\n\nSample of structure\n\n\nCertificate xsi:type=\nd:CertificateInfo\n\n    \nIssuer xsi:type=\nxsd:string\n/emailAddress=pki@sk.ee/C=EE/O=AS Sertifitseerimiskeskus/OU=ESTEID/SN=1/CN=ESTEID-SK\n/Issuer\n\n    \nSubject xsi:type=\nxsd:string\n/C=EE/O=ESTEID/OU=digital signature/CN=KESKEL,URMO,38002240232/SN=KESKEL/GN=URMO/serialNumber=38002240232\n/Subject\n\n    \nValidFrom xsi:type=\nxsd:string\n2005.03.18T22:00:00Z\n/ValidFrom\n\n    \nValidTo xsi:type=\nxsd:string\n2008.03.22T22:00:00Z\n/ValidTo\n\n    \nIssuerSerial xsi:type=\nxsd:string\n1111128454\n/IssuerSerial\n\n    \nPolicies xsi:type=\nd:CertificatePolicy\n\n        \nOID xsi:type=\nxsd:string\n1.3.6.1.4.1.10015.1.1.1.1\n/OID\n\n        \nURL xsi:type=\nxsd:string\nhttp://www.sk.ee/cps/\n/URL\n\n        \nDescription xsi:type=\nxsd:string\nnone\n/Description\n\n    \n/Policies\n\n\n/Certificate\n\n\n\n\n\nDataFileInfo\n\n\nThe given data structure describes the information of the data file(s) inside DigiDoc. The structure may contain a data file in Base64 format or just a hash of the data file depending on the value of the ContentType attribute.\n\n\n\n\nId\n \u2013unique identifier of a file. In case of DIGIDOC-XML format, the data file identifiers start with a symbol \u201eD\" followed by the file's sequence number. In case of BDOC format the identifier is the file name, which must be unique. Within a StartSession request the given attribute is not valued and an empty string is sent/forwarded.\n\n\nFilename\n \u2013 A name of the data file without a path.\n\n\nContentType\n \u2013 Data file's content type (HASHCODE, EMBEDDED_BASE64)\n\n\nHASHCODE\n \u2013 To service is sent the hashcode* only not the entire data file's content. The method how to calculate the hashcode is described in parameter \nDigestType\n and the hashcode itself is in parameter \nDigestValue\n.\n\n\nEMBEDDED_BASE64\n - The content of the file is in Base64 encoding in DfData attribute.\n\n\n\n\n\n\nMimeType\n \u2013 Mime type of datafile.\n\n\nSize\n \u2013 The actual size of file in bytes.\n\n\nDigestType\n - Hashcode type of the data file. In case of DIGIDOC-XML format the form currently supported algorithm is \"sha1\", in case of BDOC format the supported algorithm is \"sha256\". Required for HASHCODE content type only.\n\n\nDigestValue\n \u2013 The value of data file's hash* in Base64 encoding. Required for HASHCODE content type only.\n\n\nDfData\n - Data file content in Base64 encoding.\n\n\n\n\n* See example, how to calculate hash over data file and send it to the service from \nStartSession\n \n\n\nSOAP Error Messages\n\n\nThe SOAP error message contains error code in the \n object and additional text in the \n object.\n\n\nA new structure of error objects is being used in the responses of the methods MobileSighHash and GetMobileSignHashStatus. The element \n is \n type of object that contains one \n element with a message that explains the error message, and a zero or more \n elements with detailed descriptions of the errror (please see the examples at the end of the chapter).\n\n\nError messages are grouped as follows\n:\n\n\n\n\n100-199\n \u2013 errors caused by user (Application Provider) of the service\n\n\n200-299\n \u2013 internal errors of the service\n\n\n300-399\n \u2013 errors caused by end user and his/her mobile phone\n\n\n\n\nList of error codes:\n\n\n\n\n\n\n\n\nError Code\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\n100\n\n\nGeneral error\n\n\n\n\n\n\n101\n\n\nIncorrect input parameters\n\n\n\n\n\n\n102\n\n\nSome of required input parameters are missing\n\n\n\n\n\n\n103\n\n\nService provider does not have access to SK validity confirmation service (OCSP response UNAUTHORIZED)\n\n\n\n\n\n\n200\n\n\nGeneral error of the service\n\n\n\n\n\n\n201\n\n\nMissing user certificate\n\n\n\n\n\n\n202\n\n\nUnable to verify certificate validity\n\n\n\n\n\n\n203\n\n\nSession is locked by the other SOAP request.\n\n\n\n\n\n\n300\n\n\nGeneral error related to user's mobile phone\n\n\n\n\n\n\n301\n\n\nNot a Mobile-ID user\n\n\n\n\n\n\n302\n\n\nThe certificate of the user is not valid (OCSP said: REVOKED)\n\n\n\n\n\n\n303\n\n\nCertificate is not activated or/and status of the certificate is unknown (OCSP said: UNKNOWN)\n\n\n\n\n\n\n304\n\n\nCertificates is suspended\n\n\n\n\n\n\n305\n\n\nCertificate is expired\n\n\n\n\n\n\n413\n\n\nIncoming message exceeds permitted volume limit.\n\n\n\n\n\n\n503\n\n\nThe number of simultaneous requests of the service has been exceeded.\n\n\n\n\n\n\n\n\nExample 1 of the service error message\n\n\nIn the request (the first version service, old structure) the phone number format was incorrect or the country code of the phone number was not included in the list of supported country codes.\n\n\nSOAP-ENV:Fault\n\n   \nfaultcode\nSOAP-ENV:Client\n/faultcode\n\n   \nfaultstring xml:lang=\nen\n102\n/faultstring\n\n   \ndetail\n\n      \nmessage\nUser IDcode and Phone number are mandatory\n/message\n\n   \n/detail\n\n\n/SOAP-ENV:Fault\n\n\n\n\n\nExample 2 of the service error message\n\n\nSeveral errors were identified in the request (the second version service, new structure).\n\n\n\n\nSequence of the request parameters was incorrect. Parameter \"IDCode\" was expected as the first one.\n\n\nPhone number does not correspond to the expected type\n\n\n\n\nSOAP-ENV:Fault\n\n   \nfaultcode\nSOAP-ENV:Client\n/faultcode\n\n   \nfaultstring xml:lang=\nen\n101\n/faultstring\n\n   \ndetail\n\n      \nendpointError\n\n         \nmessage\nRequest message validation failed\n/message\n\n         \nreason\ncvc-complex-type.2.4.a: Invalid content was found starting with element 'MessageToDisplay'. One of '{IDCode}' is expected.\n/reason\n\n         \nreason\ncvc-minLength-valid: Value '' with length = '0' is not facet-valid with respect to minLength '5' for type 'PhoneNumberType'.\n/reason\n\n         \nreason\ncvc-type.3.1.3: The value '' of element 'PhoneNo' is not valid.\n/reason\n\n      \n/endpointError\n\n   \n/detail\n\n\n/SOAP-ENV:Fault\n\n\n\n\n\nContainer validation\n\n\nWhen an existing container is sent to DigiDocService, the document is automatically validated. Starting from JDigiDoc library version 3.8 certain technical errors are allowed in the container for compatibility reasons. Such errors are reported as warnings.\n\n\nWhen a container has warnings, the signatures are considered legally valid (and thus the status of these signatures is \"OK\", even though an \"Error\" element is also present). For some warnings, further modifications to the document are not allowed (adding and removing signatures is not permitted). The following errors are considered warnings:\n\n\n\n\n129 WARN_WEAK_DIGEST \u2013 the container uses a weak hash algorithm (e.g., SHA-1). Adding new signatures is not allowed.\n\n\n173 ERR_DF_INV_HASH_GOOD_ALT_HASH \u2013 the XML DataFile element is missing a namespace attribute. Adding signatures is not allowed.\n\n\n176 ERR_ISSUER_XMLNS \u2013 The XML elements X509IssuerName and/or X509SerialNumber are lacking namespace attributes.\n\n\n177 ERR_OLD_VER \u2013 The container version is not supported anymore. Adding signatures is not allowed.\n\n\n\n\nFor more information about warnings, please refer to the JDigiDoc library documentation: \nhttp://www.id.ee/public/SK-JDD-PRG-GUIDE.pdf\n , chapter \"Validation status VALID WITH WARNINGS\".\n\n\nThe warnings are only visible in responses under the SignatureInfo elements. The Status element under SignatureInfo has the value \"OK\", but there is also an \"Error\" element present, whose category is set to \"WARNING\". The warning is specified in the \"Code\" and \"Description\" elements.", 
            "title": "API Docs"
        }, 
        {
            "location": "/api/api_docs/#authentication-api", 
            "text": "", 
            "title": "Authentication API"
        }, 
        {
            "location": "/api/api_docs/#mobileauthenticate", 
            "text": "Query for starting authentication session.  First, certificate validity of the user's authentication certificate is verified. In case the certificate is valid, an authentication message is \npassed to the user's mobile phone. Otherwise, error message is returned. The resulting response to the query contains information about the user, \ntransaction ID and optionally user's certificate for authentication and certificate validity information.", 
            "title": "MobileAuthenticate"
        }, 
        {
            "location": "/api/api_docs/#query", 
            "text": "Parameter    Type    R    Description        IDCode    String    +    Personal Identification Code of the user.It is recommended to use both input parameters\nIDCode and PhoneNo! In case of Lithuanian Mobile-ID both IDCode and PhoneNo are mandatory.      CountryCode    String(2)    -    Country of origin. ISO 3166-type 2-character country codes are used (e.g. EE)      PhoneNo    String    +    User's phone number with country code in form +xxxxxxxxx (e.g. +3706234566)..\nIf both PhoneNo and IDCode parameters are given, correspondence between personal code and\nphone number is verified and in case of inconsistency SOAP error code 301 is returned. It is\nrecommended to use both input parameters IDCode and PhoneNo! In case of Lithuanian Mobile-ID users\nIDCode and PhoneNo are BOTH mandatory.\n(see  Starting Mobile-ID Operations ). If the element  PhoneNo \nhas been set,\nthe country attribute set in the prefix is used (independent on the value of the\nelement \"CountryCode\").      Language    String(3)    +    Language for user dialog in mobile phone. 3-letters capitalized acronyms are used.\nPossible values: EST, ENG, RUS, LIT      ServiceName    String(20)    +    Name of the service \u2013 previously agreed with Application Provider and DigiDocService operator.\nMaximum length \u2013 20 chars.      MessageToDisplay    String(40 bytes)    -    Text displayed in addition to ServiceName and before asking authentication PIN.\nMaximum length is 40 bytes. In case of Latin letters, this means also a 40 character long text,\nbut Cyrillic characters may be encoded by two bytes and you will not be able to send more\nthan 20 symbols.      SPChallenge    String(20)    -    10-byte random challenge generated by the Application Provider witch would be part of the\nmessage for signing by user during authentication. In HEX form.   NB!  For security reasons it is\nrecommended to always fill this field with a different random value every time. When authentication\nsucceeds, it is recommended to verify that the user signed a message that contains this challenge\nvalue. (For more information about signature verification, see the description of the  Signature \nelement for the  GetMobileAuthenticateStatus  operation.)       MessagingMode    String    +    Mode to be used to respond to theMobileAuthenticate query. Options are:   asynchClientServer  \u2013 Appliaction Provider will make repeated G_etMobileAuthenticateStatus_\n  queries.   asynchServerServer  \u2013 the response will be sent to the Application Provider by in\n  asynchronous mode (see: parameter AsyncConfiguration)      AsyncConfiguration    Integer    -    This parameter is required when using \"asynchServerServer\" messaging mode and identifies\nconfiguration mode. This value has to be previously agreed. Currently,  Java Message Services  (JMS)\ninterface is supported.      ReturnCertData    Boolean    -    If  TRUE , certificate of the user is returned. Certificate is useful if AP wants to save it\nand/or independently verify correctness of the signature and validation data.      ReturnRevocationData    Boolean    -    If  TRUE , OCSP response to the certificate validity query is returned.", 
            "title": "Query"
        }, 
        {
            "location": "/api/api_docs/#response", 
            "text": "Parameter  Type  Description      Sesscode  Integer  Session code for current session    Status  String  \"OK\" if no errors  NB! \"OK\" does not mean that the user is successfully authenticated \u2013 response \"USER_AUTHENTICATED\" would indicate this instead.In case error occurs, a SOAP error object is returned. Description of the SOAP error object and list of error codes are described in  SOAP Error Messages .    UserIDCode  String  Personal Identity Code of the user. The value is fetched from \"Serial Number\" field of the certificate    UserGivenname  String  First name of the user. The value is fetched from \"G\" (given name) field of the certificate    UserSurname  String  Last name of the user. The value is fetched from \"SN\" (surname) field of the certificate    UserCountry  String(2)  Country of the origin in ISO 3166 2-character style. The value is fetched from \"C\" (country) field of the certificate    UserCN  String  \u201eCommon Name\" of the certificate holder. The value is fetched from \"CN\" (common name) field of the certificate    CertificateData  String  User's certificate in BASE64 coding. Returned if parameter ReturnCertData was set \u201eTRUE\" in the query.    ChallengeID  String  4-character control code calculated on basis of  the Challenge value to be signed. This code is displayed on mobile phone's screen and shall be also displayed by Application Provider in order to ensure the user on authenticity of the query.  NB!  Application provider must ask user to verify that those codes are the same.    Challenge  String  The data to be signed by the user. Consists of mixture of data sent by Application Provider in SPChallenge (10 bytes) field of the query and data added by DigiDocService (also 10 bytes).Returned only if SPChallenge field in the query was set.    RevocationData  String  OCSP response in BASE64 coding. Returned if parameter ReturnRevocationData was set \u201eTRUE\" in the query.     In case asynchClientServer messaging mode is used, the Application Provider shall start sending GetMobileAuthenticateStatus queries until error message or positive answer will be returned.   NB!  It is reasonable to wait 15 seconds before starting sending status queries  - it is improbable that message from user's phone \narrives earlier because of technical and human limitations. Mobile-ID transactions will time out in 4 minutes or less.   When using asynchServerServer messaging mode, a message is sent to the Application Provider in accordance with previously agreed configuration.  The structure of the XML message sent back to Application provider is as follows:     Parameter  Type  Description      Sesscode  Integer  Session identifier    Status  String  \"USER_AUTHENTICATED\" in case of successful authentication. Other possible values are described in the description of response to the  GetMobileAuthenticateStatus  query.    Data  String  Signature value in BASE64 encoding. Returned only if SPChallenge field in the query was set. For more info, see the  Signature  field in the  GetMobileAuthenticateStatus  and  Signing algorithms", 
            "title": "Response"
        }, 
        {
            "location": "/api/api_docs/#getmobileauthenticatestatus", 
            "text": "This method is relevant when asynchClientServer messaging mode is used.", 
            "title": "GetMobileAuthenticateStatus"
        }, 
        {
            "location": "/api/api_docs/#query_1", 
            "text": "Parameter  Type  R  Description      Sesscode  Integer  +  Session identifier \u2013 use the value returned with MobileAuthenticate method    WaitSignature  Boolean  +  \"If \"TRUE\", then the Service will wait for a response from MSSP before responding. If \"FALSE\" then response is returned immediately and the application should invoke GetMobileAuthenticate again after a small delay (2-10 seconds).", 
            "title": "Query"
        }, 
        {
            "location": "/api/api_docs/#response_1", 
            "text": "Parameter    Type    Description        Status    String    Process status:   OUTSTANDING_TRANSACTION  \u2013 authentication is still on the way;  USER_AUTHENTICATED  \u2013 authentication successful;  NOT_VALID  \u2013 the action is completed but the signature created is not valid;  EXPIRED_TRANSACTION  \u2013 timeout;  USER_CANCEL  \u2013 user cancelled the action;  MID_NOT_READY  \u2013 the MobileID of the SIM is not yet ready for the operations;  PHONE_ABSENT  \u2013 phone is switched off or out of coverage;  SENDING_ERROR  \u2013 other error when sending message (phone is incapable of receiving the\n  message, error in messaging server etc.);  SIM_ERROR  \u2013 SIM application error;  INTERNAL_ERROR  \u2013 technical error.       Signature    String     Raw signature value in Base64 encoding. Returned only if SPChallenge field in\n  the query was set in the MobileAuthenticate request.  NB! For security reasons it is recommended that application providers verify this\n  signature. The signature signs the challenge value that was returned by the\n  MobileAuthenticate call (the \"Challenge\" field). It should also be verified that the\n  first 10 bytes of this challenge were chosen by the application provider (that is,\n  they should be equal to the value \"SPChallenge\" that was passed into MobileAuthenticate).  Note that the authentication signatures are calculated without hash functions, both in\n  the case of RSA and ECDSA. For example, if the challenge\n  was \"12345678901234567890369330D3483DAED0496D\", (where the first half was chosen by\n  the application provider), then the algorithm proceeds as if this challenge was\n  actually a hash value. Therefore, for RSA, the usual SHA-1 prefix is prepended to the\n  challenge before signing (even though the value did not come from SHA-1; this is\n  the standard SHA-1 prefix from PKCS #1). As usual, ECDSA does not have prefixes.  The signature should be verified against the authentication certificate of\n  the given user (as returned by the \"CertificateData\" field in MobileAuthenticate).       The session will be terminated unless the Status has value OUTSTANDING_TRANSACTION.", 
            "title": "Response"
        }, 
        {
            "location": "/api/api_docs/#checkcertificate", 
            "text": "Given method can be used to check the validity of certificates (including ID-card and other smartcard certificates and also digital stamp certificates issued by AS Sertifitseerimiskeskus) and number of foreign Certification Authorities. Additional info is available from the sales department of Sertifitseerimiskeskus.  Additionally, this operation returns the values of the most important fields from the certificate.", 
            "title": "CheckCertificate"
        }, 
        {
            "location": "/api/api_docs/#query_2", 
            "text": "Parameter  Type  R  Description      Certificate  String  +  Certificate to be checked for validity, in Base64 format. May include \u201e---BEGIN CERTIFICATE---\u201e and \u201e---END CERTIFICATE---\u201e lines (according to PEM format)    ReturnRevocationData  Boolean  -  If TRUE, certificate's validity information is returned on RevocationData field in response.", 
            "title": "Query"
        }, 
        {
            "location": "/api/api_docs/#response_2", 
            "text": "Parameter    Type    Description        Status    String    Certificate's validity information:   GOOD  \u2013 certificate is valid  REVOKED  \u2013 certificate has been revoked  UNKNOWN  \u2013 certificate has never been issued or issuer is unknown  EXPIRED  \u2013 certificate has been expired  SUSPENDED  \u2013 certificate has been suspended       UserIDCode    String    Certificate owner's Personal Identification Code. In case certificate has been issued by SK,\nthis value will be taken from certificate subject's serial number field.      UserGivenname    String    Certificate owner's given name, this value will be taken from certificate subject's G (given name)\nfield.      UserSurname    String    Certificate owner's surname, this value will be taken from certificate subject's S (surname) field.      UserCountry    String(2)    Certificate owner's country, this value will be taken from certificate subject's C (country) field.\nISO 3166 2-letter country codes are used.      UserOrganisation    String    Certificate owner's organization, this value will be taken from certificate\nsubject's O (Organization) field.      UserCN    String    Certificate owner's common name, this value will be taken from certificate subject's\nCN (Common name) field.      IssuerCN    String    Certificate issuer's common name, this value will be taken from certificate issuers's\nCN (Common name) field.      KeyUsage    String    Usage of the (secret) key related to the certificate.      EnhancedKeyUsage    String    Enhanced key usage      RevocationData    String    Certificate's validity information (OCSP service's response) in Base64 format. This response\nparameter is only present when ReturnRevocationData request parameter has been set to TRUE.      Response parameters are all UTF-8 encoded.", 
            "title": "Response"
        }, 
        {
            "location": "/api/api_docs/#digital-signature-api", 
            "text": "", 
            "title": "Digital Signature API"
        }, 
        {
            "location": "/api/api_docs/#startsession", 
            "text": "In most cases the transaction with the service is started using the StartSession method. It possible to also send data files with this operation; such files will be stored in session and can be operated on later. More precisely, there are 3 different ways to use StartSession:   The request can contain a DigiDoc or BDOC container. This is useful for signing and verifying existing containers, for adding or removing data files from the container, and also for extracting data file contents. To use this option, use the \"SigDocXML\" parameter. (Conversely, the \"datafile\" parameter should be left empty.)  A session can also be started without any data files. This is useful for example for creating new BDOC containers (which can be accomplished by invoking the \"CreateSignedDoc\" operation next). In this case, both parameters should be empty: \"SigDocXML\" and \"datafile\".  There is also an option for creating DigiDoc containers directly from this operation (this option only works for DigiDoc containers; BDOC can be created with the \"CreateSignedDoc\" operation). To use this operation, \"SigDocXML\" parameter should be empty, \"datafile\" parameter should be filled.   In the course of the StartSession's query a unique session identifier is returned, which should be added to every procedure called within the transaction.", 
            "title": "StartSession"
        }, 
        {
            "location": "/api/api_docs/#query_3", 
            "text": "Parameter  Type  R  Description      SigningProfile  String  -  This value is currently ignored and may be empty.    PS! This parameter is deprecated and exists only due to historical reasons.  SigningProfile  is identified by the service itself when a container is provided with  SigDocXml  parameter.   It is recommended not to use  SigningProfile  parameter as it will be removed in the future!    SigDocXML  String  -  BDOC or DDOC document. A DigiDoc in XML transformed to HTML-Escaped format. For example  DataFile  should be transformed to  DataFile . The container in BDOC format should be coded to BASE64 before it is delivered to the service.    bHoldSession  Boolean  -  A flag that indicates whether the data sent within the StartSession should be stored or the session should be closed deleting all the temporary files straight after response.  The default value is  false .    datafile  Datafile  -  Given parameter enables to send to service a data file within the StartSession request. Based on the file a DigiDoc container is created. (The BDOC format is not supported in this use case \u2013 please see the \"CreateSignedDoc\" operation). For example, when sending a  cv.pdf , a  cv.ddoc  is created which contains the \"cv.pdf\" only. The structure of a datafile element is described in  DataFileInfo . While adding the datafile it's unnecessary to determine the identifier. By default, DIGIDOC-XML 1.3 format fis created.      NB!   It's not allowed to send to the service a data of the SigDocXML and the Datafile at the same time, as these parameters exclude each other.", 
            "title": "Query:"
        }, 
        {
            "location": "/api/api_docs/#response_3", 
            "text": "Parameter  Type  Description      Status  String  Value \u201eOK\" or an error string    Sesscode  Integer  Session code used for further requests in the given transaction.    SignedDocInfo  SignedDocInfo  If a StartSession request contains a data file or a DigiDoc file, a SignedDocInfo structure will be returned in the format demonstrated in  SignedDocInfo  in current document.", 
            "title": "Response:"
        }, 
        {
            "location": "/api/api_docs/#hashcode", 
            "text": "Normally, a size limit of 4 MB applies to digitally signed containers and data files sent to DigiDocService. To use bigger files, a \"HASHCODE\" mode of operation is supported by DigiDocService, where only hashes of data files are sent to the server (in other words, file contents are not sent to the service). This can also improve performance for large data files, as sending bigger files over network can take time.  To use this HASHCODE mode, the DigiDoc or BDOC-container should be converted to the HASHCODE form before sending it to the service. (In this form, the data file contents are replaced with their hash values.) Similarly, when the container is returned by the service, it should be converted back to regular form by inserting back the data file contents. Thus, in the end, the application provider still has a regular container that can be verified by standard tools (i.e., the DigiDoc3 client software). The exact form of HASHCODE depends on the particular format used (DDOC or BDOC).", 
            "title": "HASHCODE"
        }, 
        {
            "location": "/api/api_docs/#bdoc-format-and-hashcode", 
            "text": "Note!  Hashcode is currently supported only for BDOC-TM.  Support for BDOC-TS will be added in the future.", 
            "title": "BDOC format and HASHCODE"
        }, 
        {
            "location": "/api/api_docs/#transforming-a-bdoc-container-to-hashcode-form", 
            "text": "Given the BDOC format, the container should be transformed to the HASCODE form in the following steps (before sending it to the DigiDocService):   1)Remove  all signed  files from the container. As the BDOC container is a ZIP-file, this can be accomplished with standard ZIP-file tools. The signed files are in the root folder of the ZIP file.  2)Add hashes of the removed files into the container. Two hash files need to be added, to the following locations in the BDOC (ZIP) file:  META-INF/hashcodes-sha256.xml  META-INF/hashcodes-sha512.xml     The first hash file contains the SHA-256 hashes of all of the signed files. Similarly, the second file contains SHA-512 hashes for the same files. Both files have the same format: for every signed file, a full path is listed (as it appears in the BDOC file), the hash of the file in Base64, and also the length of the file in bytes. (The XML-schema is below). Hash values are calculated directly on the file contents (i.e., not over XML elements, which is different from the HASHCODE form for DDOC).  As an example, if the container has 2 documents, named \"  file1.txt \" and \"  File2.docx \" (the sample files are downloadable from  http://www.id.ee/public/bdoc_hashcode_example.zip ), the corresponding hash files have the following contents:  META-INF/hashcodes-sha256.xml:  ?xml version= 1.0  encoding= utf-8 ?  hashcodes \n     file-entry full-path= file1.txt  hash= fo+6a5j64VcKWJwvXsJE8PlB3tAdQ8/uwHAL5AEWmbk=  size= 189  / \n     file-entry full-path= File2.docx  hash= 3v5ZupBhiNxkCmmVKbtwwJKVCKxTZrQDPpNKF02ZiPo=  size= 11665 /  /hashcodes   META-INF/hashcodes-sha512.xml:  ?xml version= 1.0  encoding= utf-8 ?  hashcodes \n     file-entry full-path= file1.txt  hash= WIJZPgHWMrqfHqH7Arfjo8ymMZvI0IUgG8G8UESbnHXcpEPgOKutPph1GYOcSprj08VZa0m+myhlVPH29ThjIA==  size= 189  / \n     file-entry full-path= File2.docx  hash= 3z7gxofgCPoX2feWB9TQhUIvOlhsxm9RVR3iEFcCZ7uPcZuRc+KS9evmBC6bAMUnQOvkygXNTPfTIKb50krYYg==  size= 11665  /  /hashcodes   The hash files must conform to the following XML-schema:  ?xml version= 1.0  encoding= UTF-8  standalone= yes ?  xs:schema version= 1.0  xmlns:xs= http://www.w3.org/2001/XMLSchema \n   xs:element name= hashcodes  type= hashcodesType / \n   xs:complexType name= fileEntryType \n     xs:attribute name= full-path  type= xs:string  use= required / \n     xs:attribute name= hash  type= xs:string  use= required / \n     xs:attribute name= size  type= xs:long  use= required / \n   /xs:complexType \n   xs:complexType name= hashcodesType \n     xs:sequence \n       xs:element name= file-entry  type= fileEntryType  minOccurs= 0  maxOccurs= unbounded / \n     /xs:sequence \n   /xs:complexType  /xs:schema    Note!  Although the above ZIP operations can be done with any standard archive tools, some care must be taken to \nprevent accidental alterations to the file structure. Specifically, the ASiC standard mandates the following about \nthe \"mimetype\" file:    The  mimetype  file should (continue to) be the first file in the ZIP archive.  The  mimetype  file should remain  not  compressed (it should be  stored , not for example  deflated ).   After these steps, the HASHCODE form is ready. The contents of the BDOC file will then be analogous to the following diagram (note the addition of 2 hash files and absent data files):  \u251c\u2500\u2500 META-INF\n\u2502   \u251c\u2500\u2500 **hashcodes-sha256.xml**\n\u2502   \u251c\u2500\u2500 **hashcodes-sha512.xml**\n\u2502   \u251c\u2500\u2500 manifest.xml\n\u2502   \u2514\u2500\u2500 signatures0.xml\n\u2514\u2500\u2500 mimetype  The files in this example are downloadable (with BDOC containers) from the following address:  http://www.id.ee/public/bdoc_hashcode_example.zip", 
            "title": "Transforming a BDOC container to HASHCODE form"
        }, 
        {
            "location": "/api/api_docs/#transforming-the-bdoc-container-back-to-standard-form", 
            "text": "When the HASHCODE container is returned back by DigiDocService, analogous steps need to be carried out:    1)The data files need to be added back into the container (the container is in ZIP-format, as all BDOC files are in ZIP-format). Note the following:    The data files in the container need to have a ZIP-file comment about the BDOC-library. In practice, this comment may simply be copied from other files in the archive (for example, from the \u201emimetype\"-file). Note that the signature files (META-INF/signatureN.xml) should keep their existing comments (this is to preserve information about the tools used for signing particular signatures). An example of such comment is the following:\nLIB DigiDocService/3.6.4 format: BDOC/2.1 Java: 1.7.0_51/Oracle Corporation OS: Windows 8/amd64/6.2 JVM: Java HotSpot(TM) 64-Bit Server VM/Oracle Corporation/24.51-b03    Some care must be taken to prevent accidental alterations to the file structure. Specifically, the ASiC standard mandates the following about the \"mimetype\" file:   The \"mimetype\" file should (continue to) be the  first  file in the ZIP archive.  The \"mimetype\" file should remain  not  compressed (it should be  stored , not for example  deflated ).     2)Remove all the hash files hashcodes-*.xml from the folder META-INF.    After these steps, the BDOC container is again in its normal form, and is ready to be used by for example the DigiDoc3 client software. Its contents should look similar to this:  \u251c\u2500\u2500 META-INF\n\u2502   \u251c\u2500\u2500 manifest.xml\n\u2502   \u2514\u2500\u2500 signatures0.xml\n\u251c\u2500\u2500 **file1.txt**\n\u251c\u2500\u2500 **File2.docx**\n\u2514\u2500\u2500 mimetype", 
            "title": "Transforming the BDOC container back to standard form"
        }, 
        {
            "location": "/api/api_docs/#ddoc-format-and-hashcode", 
            "text": "", 
            "title": "DDOC format and HASHCODE"
        }, 
        {
            "location": "/api/api_docs/#example-1-sending-hash-code-instead-of-full-data-file-to-the-service-for-signing", 
            "text": "For instance, we intend to digitally sign following 42-bytes long (containing 2 CRLF newlines) text file named test.txt:  This is a test file\nsecondline\nthirdline  At first, we compose following xml-element, in  canonic  1 form, where value \u201eVGhpcyBpcyBhIHRlc3QgZmlsZQ0Kc2Vjb25kbGluZQ0KdGhpcmRsaW5l\" is previus datafile Base64 encoded and where there is added one newline before    ending tag:  DataFile xmlns= http://www.sk.ee/DigiDoc/v1.3.0#  ContentType= EMBEDDED\\_BASE64  Filename= test.txt  Id= D0  MimeType= text/plain  Size= 42 VGhpcyBpcyBhIHRlc3QgZmlsZQ0Kc2Vjb25kbGluZQ0KdGhpcmRsaW5l /DataFile   Assuming, that xml canonization replaced CRLF (\\r\\n) newlines with LF (\\n) and Base64-encoded datafile is in form of 64-symbols long lines and all values, including attribute values, are UTF8 encoded, we proceed by calculating sha1 hash over previus  ..  element, including tags. We should get HEX value of  \u201eb7c7914ab293811e0f0002932d85860a3b934890\", which we convert to binary string (consequential bytes): 0xb7, 0xc7, 0x91, ..., 0x90. And at last we Base64-encode the binary string, which gives us following result:  \u201et8eRSrKTgR4PAAKTLYWGCjuTSJA=\".  In PHP progamming language, it would look something like that:  base64\\_encode(pack( H\\* ,  b7c7914ab293811e0f0002932d85860a3b934890 ));  Now, lets compose a data structure for StartSession method's Datafile parameter and call it $inputData:  Filename= test.txt \nMimeType= text/plain \nContentType= HASHCODE \nSize=42\nDigestType= sha1 \nDigestValue= t8eRSrKTgR4PAAKTLYWGCjuTSJA=   Now lets send this datastructure to DigiDocService, using StartSession method:  StartSession(\u201e , \u201e , TRUE, $inputData);  What follows are series of calls to DigiDocService to complete the digital signing process. Lets say we have done everything that's needed and DigiDoc container is signed and ready in the service waiting for us to download it. Now we call service's GetSignedDoc method to get the container.  In the downloaded container, we have to replace xml element   ...   with the one we previusly composed:  DataFile xmlns= http://www.sk.ee/DigiDoc/v1.3.0#  ContentType= EMBEDDED\\_BASE64  Filename= test.txt  Id= D0  MimeType= text/plain  Size= 42 VGhpcyBpcyBhIHRlc3QgZmlsZQ0Kc2Vjb25kbGluZQ0KdGhpcmRsaW5l /DataFile   For now we should have correct DigiDoc container.", 
            "title": "Example 1: sending hash code instead of full data file to the service for signing"
        }, 
        {
            "location": "/api/api_docs/#example-2-sending-digidoc-container-to-the-service-replacing-full-datafile-with-hash-code", 
            "text": "For instance, if we have the following DataFile element in DigiDoc container:  DataFile xmlns= http://www.sk.ee/DigiDoc/v1.3.0#  ContentType= EMBEDDED\\_BASE64  Filename= test.txt  Id= D0  MimeType= text/plain  Size= 42 VGhpcyBpcyBhIHRlc3QgZmlsZQ0Kc2Vjb25kbGluZQ0KdGhpcmRsaW5l /DataFile   and we wish to send hash code to the service, not full data file, then we should replace the above xml element with the following:   After completing operations (verifying document, or adding signatures etc) with DigiDoc container that we sent to the service, and downloading the container, we have to make the reverse replacement so that DataFile element contains full data file. Otherwise, it is not a proper DigiDoc format file.", 
            "title": "Example 2: sending Digidoc container to the service, replacing full datafile with hash code."
        }, 
        {
            "location": "/api/api_docs/#closesession", 
            "text": "A transaction is closed by the CloseSession request. As the result of the request all the information stored in the server within this session will be deleted. To start a new session a StartSession request should be sent once again. It's always recommended to close a transaction with the CloseSession request. If the application doesn't close the session itself, it will be closed automatically after timeout.  Query:     Parameter  Type  R  Description      Sesscode  Integer  +  An identifier of the active session.     Response:     Parameter  Type  Description      Status  String  If the request is successful, the value will be \u201eOK\".     If the request is unsuccessful, a SOAP-FAULT object will be returned.", 
            "title": "CloseSession"
        }, 
        {
            "location": "/api/api_docs/#createsigneddoc", 
            "text": "If an application desires to define the format and version of the formable container, the CreateSignedDoc request will be used for \ncreating a new container. After the CreateSignedDoc request takes place the AddDataFile request for adding the data. \nNow the file is ready for digital signing.", 
            "title": "CreateSignedDoc"
        }, 
        {
            "location": "/api/api_docs/#query_4", 
            "text": "Parameter    Type    R    Description        Sesscode    Integer    +    An identifier of the active session.      Format    String    +    a format of a document container to be created (currently supported formats are DIGIDOC-XML and BDOC)      Version    String    +    a version number of the format of a creatable document container\n(currently supported version for DIGIDOC-XML is 1.3 and for BDOC 2.1)      SigningProfile    String    -     LT_TM  (Long Term with Time Mark): a profile for BDOC-TM (a BDOC signature with time-mark)\n  and DDOC.  LT_TM  is currently the default option.  LT  (Long Term): Used for creating standard BDOC-TS signatures (BDOC with time-stamp / ASiC-E);\nit is supported for the BDOC container format        NB!  Only container formats DIGIDOC-XML 1.3 and BDOC 2.1 are supported. If an inappropriate combination of given \nformat and version number is used in request parameters, a SOAP error object with error message \"Invalid format and version combination!\" will be returned.   The description of DigiDoc formats are available on the webpage  http://www.id.ee/index.php?id=36108  .", 
            "title": "Query"
        }, 
        {
            "location": "/api/api_docs/#response_4", 
            "text": "Parameter  Type  Description      Status  String  If the request is successful, the value will be \u201eOK\".    SignedDocInfo  String  SignedDocInfo structure will be returned in the format demonstrated in  SignedDocInfo .", 
            "title": "Response"
        }, 
        {
            "location": "/api/api_docs/#adddatafile", 
            "text": "AddDataFile request enables to add an additional data file to a DigiDoc container which is in session. If one datafile is added within the StartSession, but the \nuser would like to sign a few more data files in a DigiDoc container, then using this method the rest of the data files will be added before signing. \nThe size limit of 4 MB applies for DigiDoc containers and datafiles sent to Service. For bigger files content type HASHCODE could be used. See description below.  NB! Adding a data file is possible in the DigiDoc file with no signatures only.", 
            "title": "AddDataFile"
        }, 
        {
            "location": "/api/api_docs/#query_5", 
            "text": "Parameter    Type    R    Description        Sesscode    Integer    +    An identifier of the active session.      FileName    String    +    Name of the data file without the path.      MimeType    String    +    Type of the datafile      ContentType    String    +    Data file's content type ( HASHCODE ,  EMBEDDED_BASE64 )   HASHCODE  \u2013 To service is sent the hashcode only, not the entire data file's content.\n  The method how to calculate the hashcode is described in parameter  DigestType  and the hashcode itself is in\n  parameter  DigestValue . Please see  StartSession . how to calculate hash from the\n  source data file and how to send\n  it to the service.  EMBEDDED_BASE64  - The content of the file is in Base64 encoding in Content parameter.       Size    Integer    +    The actual size of data file in bytes.      DigestType    String    -    Hash code type of the data file. In case of DIGIDOC-XML format, \"sha1\" is supported; in case of BDOC, \"sha256\"\nis supported. Required in case of HASHCODE content type of file only.      DigestValue    String    -    The value of data file's hash in Base64 encoding.. Required for HASHCODE content type only.\nIn case of the DIGIDOC-XML format, the hash is calculated over a DigiDoc   element, using a canonicalized\nform (for more information, see  StartSession ).In case of BDOC, the has is calculated over\nthe binary data file content.      Content    String    -    The content of data file in Base64 encoding, is set if ContentType is  EMBEDDED_BASE64 .", 
            "title": "Query"
        }, 
        {
            "location": "/api/api_docs/#response_5", 
            "text": "Parameter  Type  Description      Status  String  If the request is successful, the value will be \u201eOK\".    SignedDocInfo  SignedDocInfo  SignedDocInfo structure will be returned in the format demonstrated in  SignedDocInfo .", 
            "title": "Response"
        }, 
        {
            "location": "/api/api_docs/#mobilesign", 
            "text": "The MobileSign method invokes mobile signing of a DigiDoc file in the current session. For using the MobileSign method, at least one datafile shall be in DigiDoc container.  In case creation of \"pure\" mobile signature is needed \u2013 i.e. without creating DigiDoc file and/or sending it to the service \u2013 MobileCreateSignature should be used instead.", 
            "title": "MobileSign"
        }, 
        {
            "location": "/api/api_docs/#query_6", 
            "text": "Parameter    Type    R    Description        Sesscode    Integer    +    An identifier of the active session      SignerIDCode    String    +    Identification number of the signer (personal national ID number).It is recommended\nto use both input parameters IDCode and PhoneNo! In case of Lithuanian Mobile-ID users\nSignerIDCode and SignerPhoneNo are mandatory.      SignersCountry    String    -    Country which issued the personal national ID number in ISO 3166-style 2-character\nformat (e.g. \"EE\")      SignerPhoneNo    String    +    Phone number of the signer with the country code in format +xxxxxxxxx\n(for example +3706234566). If both SignerPhoneNo and SignerIDCode parameters are given,\ncorrespondence between personal code and phone number is verified and in case of\ninconsistency SOAP error code 301 is returned.It is recommended to use both input\nparameters IDCode and PhoneNo! In case of Lithuanian Mobile-ID users SignerIDCode and\nSignerPhoneNo are mandatory (see Starting Mobile-ID Operations ).\nIf the element  SignerPhoneNo  has\nbeen set, the country attribute set in the prefix is used (independent on the value\nof the element \"SignersCountry\").      ServiceName    String    +    Name of the service \u2013 previously agreed with Application Provider and DigiDocService\noperator. Required, maximum length \u2013 20 chars.      AdditionalDataToBeDisplayed    String    -    Additional text shown to the signer. Optional.Maximum length is 40 bytes. In\ncase of Latin letters, this means also a 40 character long text, but Cyrillic characters\nmay be encoded by two bytes and you will not be able to send more than 20 symbols.      Language    String    +    Language of the message displayed to the signer's phone. ISO 639 a 3-character-code\nin uppercase is used (for example  EST ,  ENG ,  RUS ,  LIT ).      Role    String    -    The text of the role or resolution defined by the user. Optional.      City    String    -    Name of the city, where it's signed. Optional.      StateOrProvince    String    -    Name of the state/province, where it's signed. Optional.      PostalCode    String    -    Postal code of the signing location. Optional.      CountryName    String    -    Name of the country, where it's signed. Optional.      SigningProfile    String    -     LT_TM  (Long Term with Time Mark): a profile for BDOC-TM (a BDOC signature\n  with time-mark) and DDOC.  LT  (Long Term): Used for creating standard BDOC-TS (BDOC with time-stamp / ASiC-E)\n  signatures.       MessagingMode    String    +    Determines the mode how the response of the MobileSign is returned.\nFollowing modes are supported:   asynchClientServer  \u2013 Some additional status request are made\n  after  MobileSign  request by the Application Provider  asynchServerServer  \u2013  After signing or in case of an error the server\n  sends a request to the client-application . The client application should\n  be capable to act in server mode to recieve the signature information request according\n  to the parameters in AsyncConfiguration parameter.       AsyncConfiguration    Integer    -    Determines configuration used in  asynchServerServer  messaging mode.\nThis shall be agreed previously between Application Provider and DigiDocService provider.      ReturnDocInfo    Boolean    +    If the value is true, the DigiDoc file information is returned as a\nresult of the request.      ReturnDocData    Boolean    +    If the value is true, a DigiDoc document in HTMLescaped format  SignedDocData \nelement is returned.", 
            "title": "Query"
        }, 
        {
            "location": "/api/api_docs/#response_6", 
            "text": "Parameter  Type  Description      Status  String  \"OK\" or error message.    StatusCode  String  If the request is successful, 0 is returned, otherwise an error code.    ChallengeID  String  4-digit control code calculated from hash of the value to be signed. The control code shall be displayed to the user in order to provide means to verify authenticity of the signing request.     If  asynchClientServer messaging mode is used then an Application Provider shall start sending GetSignedDocInfo requests to complete the signing session.   NB!  It is reasonable to wait at least 10 seconds before starting sending status queries  - it is improbable that message from \nuser's phone arrives earlier because of technical and human limitations. Mobile-ID transactions will time out in 4 minutes or less.   In case  asynchServerServer  messaging mode is used, a message will be sent from DigiDocService according to previously agreed configuration. The message is sent in XML format as following:     Parameter  Type  Description      Sesscode  Integer  An identifier of the active session.    Status  String  Status code. \u201eOK\" if no errors, other possible responses are described in description of GetSignedDocInfo request (field \u201eStatus\").    Data  String  a) XML structure described in  SignedDocInfo  of the document if value of the ReturnDocInfo was set \"true\" on the request.b) DigiDoc file as HTML encoded if ReturnDocInfo was set \"false\" and ReturnDocData  was set \"true\" in the request.c) Empty if both ReturnDocInfo and ReturnDocData were set \u201efalse\" in the request.", 
            "title": "Response"
        }, 
        {
            "location": "/api/api_docs/#getstatusinfo", 
            "text": "GetStatusInfo request is for getting the information about the document in session (signed) and it's status. GetStatusInfo request is also used in mobile signing in asynchronous Client-Server mode to get the signing process'es state information.", 
            "title": "GetStatusInfo"
        }, 
        {
            "location": "/api/api_docs/#request", 
            "text": "Parameter  Type  R  Description      Sesscode  Integer  +  An identifier of the active session.    ReturnDocInfo  Boolean  +  If the value is \u201etrue\", in response SignedDocInfo is set.    WaitSignature  Boolean  +  If the value is \u201etrue\", response is not sent before message from mobile phone is received or error condition is detected. If the value is \"false\", the response is returned immediately and the GetStatusInfo invocation should be repeated after a short time interval (2-10 seconds).", 
            "title": "Request"
        }, 
        {
            "location": "/api/api_docs/#response_7", 
            "text": "Parameter    Type    Description        Status    String    Status code of the last request. In case of successful request, \"OK\" or an error string.      StatusCode    String    Status of the mobile signing process:   REQUEST_OK  \u2013 initial message was received;  EXPIRED_TRANSACTION  \u2013 timeout \u2013 the user did not enter the signing\n  PIN during given period of time;  USER_CANCEL  \u2013 the user refused or cancelled the signing process;  SIGNATURE  \u2013 signature was created;  NOT_VALID  \u2013 signature created but not valid;  OUTSTANDING_TRANSACTION  \u2013 signing in process, please make new request;  MID_NOT_READY  \u2013 Mobile-ID functionality of the phone is not yet ready;  PHONE_ABSENT  \u2013 Delivery of the message was not successful, mobile phone is probably\n  switched off or out of coverage;  SENDING_ERROR  \u2013 other error when sending message (phone is incapable of receiving\n  the message, error in messaging server etc.);  SIM_ERROR  \u2013 SIM application error;  REVOKED CERTIFICATE  \u2013 certificate status revoked;  INTERNAL_ERROR  \u2013 technical error,       SignedDocInfo    SignedDocInfo    If \"ReturnDocInfo\" parameter in the GetSignedDocInfo request was set \"true\"\nthen  SignedDocInfo  structure will be returned in the format dessribed in SignedDocInfo .", 
            "title": "Response"
        }, 
        {
            "location": "/api/api_docs/#getsigneddocinfo", 
            "text": "The GetSignedDocInfo method shall be used to retrieve status information from the (signed) document in current signing session.", 
            "title": "GetSignedDocInfo"
        }, 
        {
            "location": "/api/api_docs/#request_1", 
            "text": "Parameter  Type  R  Description      Sesscode  Integer  +  An identifier of the active session", 
            "title": "Request"
        }, 
        {
            "location": "/api/api_docs/#response_8", 
            "text": "Parameter  Type  Description      Status  String  OK  or an error message    SignedDocInfo  SignedDocInfo  XML structure according to the specification in  SignedDocInfo  of the document", 
            "title": "Response"
        }, 
        {
            "location": "/api/api_docs/#getsigneddoc", 
            "text": "A signed document is returned from the webservice within the GetSignedDoc request. The content of the document is in HTMLencoded format. If there's a will to receive the document information in structured format in addition to signed document, the GetSignedDocInfo request should be used.  In case of BDOC-TS container, it has to contain at least one signature in order to obtain it, otherwise an error will be thrown.", 
            "title": "GetSignedDoc"
        }, 
        {
            "location": "/api/api_docs/#request_2", 
            "text": "Parameter  Type  R  Description      Sesscode  Integer  +  An identifier of the active session", 
            "title": "Request"
        }, 
        {
            "location": "/api/api_docs/#response_9", 
            "text": "Parameter  Type  Description      Status  String  OK  or an error message    SignedDocData  String  The signed document in the session. In case of DDOC the document is in XML format, in case of BDOC it's BASE64 encoded. As the XML tags has been transformed to HTML encoded format, therefore a HTMLDecode transduction should be done before saving the file in file system or to database. BDOC should be BASE64 decoded.", 
            "title": "Response"
        }, 
        {
            "location": "/api/api_docs/#getdatafile", 
            "text": "GetDataFile request is for inquiring an original file out of a digitally signed file.  For instance if a digitally signed file is uploaded to the service within a StartSession request, it will be possible to read out every single original file with GetDataFile request.", 
            "title": "GetDataFile"
        }, 
        {
            "location": "/api/api_docs/#request_3", 
            "text": "Parameter  Type  R  Description      Sesscode  Integer  +  An identifier of the active session    DataFileId  String  +  An identifier of a data file. In Dxx format, where xx stands for the sequence number.  DataFileId  is readable in  SignedDocInfo  structure. The structure is returned to the user of the service as a result of the  StartSession  or  GetSignedDocInfo  request.", 
            "title": "Request"
        }, 
        {
            "location": "/api/api_docs/#response_10", 
            "text": "Parameter  Type  Description      Status  String  If the request is successful, the value will be \u201eOK\".    DataFileData  DataFileInfo  the original file information in DataFileInfo structure.The structure of  DataFileInfo  is described in  DataFileInfo . Data files are returned in the same format as they were sent to the service with StartSession or AddDataFile methods. It means that if the service was sent the content of the data file, the current method will return the block of datafile having the content of the data file in Base64 encoding in DfData field. In case that only hash was sent to the service, only the hash is returned by the method.     If you try to inquire a non-existing data file, you'll receive a SOAP error-object with error-message \"No such DataFile!\".", 
            "title": "Response"
        }, 
        {
            "location": "/api/api_docs/#removedatafile", 
            "text": "RemoveDataFile  request is for removing datafile from DigiDoc container. NB! Removing datafile is allowed when container to not have any signature. If container has one or more signatures, removing datafile is not possible.", 
            "title": "RemoveDataFile"
        }, 
        {
            "location": "/api/api_docs/#request_4", 
            "text": "Parameter  Type  R  Description      Sesscode  Integer  +  An identifier of the active session.    DataFileId  String  +  An identifier of a data file. In Dxx format, where xx stands for the sequence number.  DataFileId  is readable in  SignedDocInfo  structure. The structure is returned to the user of the service as a result of the StartSession or  GetSignedDocInfo  request.", 
            "title": "Request"
        }, 
        {
            "location": "/api/api_docs/#response_11", 
            "text": "Parameter  Type  Description      Status  String  If the request is successful, the value will be  OK .    SignedDocInfo  SignedDocInfo  The document in the session info after removing the datafile.  SignedDocInfo  structure will be returned in the format demonstrated in  SignedDocInfo .     If removing the datafile is unsuccessful, a SOAP error-object will be returned with an error-message. Ie when you try to remove datafile from signed document error \"Cannot change a signed doc\" is returned.", 
            "title": "Response"
        }, 
        {
            "location": "/api/api_docs/#removesignature", 
            "text": "RemoveSignature request enables to remove a signature from the digitally signed file in session. As a result of the request a SignedDocInfo without the removed signature is returned.", 
            "title": "RemoveSignature"
        }, 
        {
            "location": "/api/api_docs/#request_5", 
            "text": "Parameter  Type  R  Description      Sesscode  Integer  +  An identifier of the active session.    SignatureId  String  +  A unique identifier of the signature. Identifications of signatures begin with \u201eS\" and the sequence number of the signature is followed (for example S0, S1 etc.). Identifications of the signatures of the session document are available in SignedDocInfo structure.This structure is returned to the service user for example as a result of the StartSession or GetSignedDocInfo request.", 
            "title": "Request"
        }, 
        {
            "location": "/api/api_docs/#response_12", 
            "text": "Parameter  Type  Description      Status  String  If the request is successful, the value will be  OK .    SignedDocInfo  SignedDocInfo  The document in the session info after removing the signature.  SignedDocInfo  structure will be returned in the format demonstrated in  SignedDocInfo .     If  removing the signature is unsuccessful, a SOAP error-object will be returned with an error-message.  Potential error-messages:   Must supply Signature id!  \u2013 the identifier of the signatures is unassigned.  No such Signature!  \u2013 no signature was found for the signature's identifier as a parameter of the request", 
            "title": "Response"
        }, 
        {
            "location": "/api/api_docs/#getsignerscertificate", 
            "text": "A request for the certificate of the signer. The request allows the service user to read the signer's certificate from a DigiDoc file (to display to the user for example).", 
            "title": "GetSignersCertificate"
        }, 
        {
            "location": "/api/api_docs/#request_6", 
            "text": "Parameter  Type  R  Description      Sesscode  Integer  +  An identifier of the active session.    SignatureId  String  +  A unique identifier of the signature. Identifications of signatures begin with \u201eS\" and the sequence number of the signature is followed (for example S0, S1 etc.). Identifications of the signatures of the session document are available in  SignedDocInfo  structure. The structure is returned to the service user for example as a result of the StartSession or  GetSignedDocInfo  request.", 
            "title": "Request"
        }, 
        {
            "location": "/api/api_docs/#response_13", 
            "text": "Parameter  Type  Description      Status  String  If the request is successful, the value will be  OK .    CertificateData  String  requested certificate as a string in BASE64 encoding (in PEM format)     If returning the certificate is unsuccessful, a SOAP error-object will be returned with an error-message.  Potential error-messages:   Must supply Signature id!  \u2013 the identifier of the signatures is unassigned.  No such Signature!  \u2013 no signature was found for the signature's identifier as a parameter of the request", 
            "title": "Response"
        }, 
        {
            "location": "/api/api_docs/#getnotaryscertificate", 
            "text": "As a result of the request a validity confirmation signer's certificate of the signature is returned (OCSP server's certificate).", 
            "title": "GetNotarysCertificate"
        }, 
        {
            "location": "/api/api_docs/#request_7", 
            "text": "Parameter  Type  R  Description      Sesscode  Integer  +  An identifier of the active session.    SignatureId  String  +  A unique identifier of the signature. Identifications of signatures begin with \u201eS\" and the sequence number of the signature is followed (for example S0, S1 etc.). Identifications of the signatures of the session document are available in SignedDocInfo structure. The structure is returned to the service user for example as a result of the StartSession or GetSignedDocInfo request.", 
            "title": "Request"
        }, 
        {
            "location": "/api/api_docs/#response_14", 
            "text": "Parameter  Type  Description      Status  String  If the request is successful, the value will be  OK .    CertificateData  String  requested certificate as a string in BASE64 encoding (in PEM format)     If returning the certificate is unsuccessful, a SOAP error-object will be returned with an error-message.  Potential error-messages:   Must supply Signature id!  \u2013 the identifier of the signatures is unassigned.  No such Signature!  \u2013 no signature was found for the signature's identifier as a parameter of the request  No notary for this Signature!  \u2013 no validity confirmation for the signature as the request of the parameter.", 
            "title": "Response"
        }, 
        {
            "location": "/api/api_docs/#getnotary", 
            "text": "The request returns the validity confirmation of the certain signature.", 
            "title": "GetNotary"
        }, 
        {
            "location": "/api/api_docs/#request_8", 
            "text": "Parameter  Type  R  Description      Sesscode  Integer  +  An identifier of the active session.    SignatureId  String  +  A unique identifier of the signature. Identifications of signatures begin with \u201eS\" and the sequence number of the signature is followed (for example S0, S1 etc.). Identifications of the signatures of the session document are available in  SignedDocInfo  structure. The structure is returned to the service user for example as a result of the StartSession or  GetSignedDocInfo  request.", 
            "title": "Request"
        }, 
        {
            "location": "/api/api_docs/#response_15", 
            "text": "Parameter  Type  Description      Status  String  If the request is successful, the value will be  OK .    OcspData  String  OCSP validity confirmation in Base64 encoding.     If returning the validity confirmation is unsuccessful,  a SOAP error-object will be returned with an error-message.  Potential error-messages:   Must supply Signature id!  \u2013 the identifier of the signatures is unassigned.  No such Signature!  \u2013 no signature was found for the signature's identifier as a parameter of the request  No notary for this Signature!  \u2013 no validity confirmation for the signature as the request of the parameter.", 
            "title": "Response"
        }, 
        {
            "location": "/api/api_docs/#getversion", 
            "text": "The request enables to check the service and to get to know it's version number.  The request has no parameters.", 
            "title": "GetVersion"
        }, 
        {
            "location": "/api/api_docs/#response_16", 
            "text": "Parameter  Type  Description      Name  String  Name of the service (currently DigiDocService).    Version  String  The version of the service in the form of x.x.x (for example 1.0.3)  The highest grade stands for major changes in the service, the second grade describes the changes which may eventuate in changing the protocol of the service. The last grade means some little fixes, which doesn't change the protocol.    Libname  String  DigiDoc library name    Libver  String  DigiDoc library version", 
            "title": "Response"
        }, 
        {
            "location": "/api/api_docs/#preparesignature", 
            "text": "The request is used for digital signing preparation if signing with smartcard.  As a result of the request a new so called half-done signature is added to the DigiDoc conteiner in session and the unique identifier of the signature and the hash to be signed is returned. The hash should be forwarded to the signing module of the user's computer.", 
            "title": "PrepareSignature"
        }, 
        {
            "location": "/api/api_docs/#request_9", 
            "text": "Parameter    Type    R    Description        Sesscode    Integer    +    An identifier of the active session.      SignersCertificate    String    +    signer's certificate transferred to HEX string format (from binary (DER) format). Mostly the\nsigning software (signing component) in the user's computer delivers the certificate in a\nproper format.      SignersTokenId    String    +    identifier of the private key's slot on a smartcard. The signing software defines it's value\nwithin reading the signer's certificate and forwards it to the signing application.      Role    String    -    The text of the role or resolution defined by the user.      City    String    -    Name of the city, where it's signed      State    String    -    Name of the state, where it's signed.      PostalCode    String    -    Postal code of the signing location.      Country    String    -    Name of the country, where it's signed.      SigningProfile    String    -     LT_TM  (Long Term with Time Mark): a profile for BDOC-TM (a BDOC signature with time-mark)\n  and DDOC.  LT  (Long Term): Used for creating standard BDOC-TS (BDOC with time-stamp / ASiC-E) signatures.       Usually the signing application asks the user about the location information of the signing and forwards it to DigiDocService. Inserting the information about role and signing location is voluntary.", 
            "title": "Request"
        }, 
        {
            "location": "/api/api_docs/#response_17", 
            "text": "Parameter  Type  Description      Status  String  If the request is successful, the value will be \u201eOK\".    SignatureId  String  the unique identifier of the signature. Identifications of signatures begin with \u201eS\" and the sequence number of the signature is followed (for example S0, S1 etc.). The identifier could be used later to remove the signature or request for signature attributes (signer's certificate, OCSP certificate, OCSP validity confirmation).    SignedInfoDigest  String  The hash to be signedas a hexadecimal string.     If returning the validity confirmation is unsuccessful,  a SOAP error-object will be returned with an error-message.  Potential error-messages:   Must supply Signature certificate!  \u2013 the value of the signer's certificate is empty.", 
            "title": "Response"
        }, 
        {
            "location": "/api/api_docs/#finalizesignature", 
            "text": "The request is used for finalizing the digital signing while signing with smartcard.  With FinalizeSignature request the signature prepared at PrepareSignature step is finished. A digitally signed signature is added to DigiDoc file and an OCSP validity confirmation is taken.", 
            "title": "FinalizeSignature"
        }, 
        {
            "location": "/api/api_docs/#request_10", 
            "text": "Parameter  Type  R  Description      Sesscode  Integer  +  An identifier of the active session.    SignatureId  String  +  The unique identifier of the signature which was returned as the result of PrepareSignaturemethod    SignatureValue  String  +  Value of the signature (signed hash)as a HEX string. The signing software  returns the value.", 
            "title": "Request"
        }, 
        {
            "location": "/api/api_docs/#response_18", 
            "text": "Parameter  Type  Description      Status  String  If the request is successful, the value will be \u201eOK\".    SignedDocInfo  SignedDocInfo  The document in the session info after adding the signature. SignedDocInfo structure will be returned in the format demonstrated in  SignedDocInfo .", 
            "title": "Response"
        }, 
        {
            "location": "/api/api_docs/#mobilecreatesignature", 
            "text": "This request is used for creating additional signature to the DigiDoc file. The \" \" block is returned as a result and the \nApplication Provider shall take care of inserting this block into DigiDoc file.  The request is built for one-step creation of mobile signature. The method takes care of acquiring of signer's certificate, validity \nconfirmation and RFC3161-type timestamps if needed in addition to getting mobile signature from the user.  There is no need to create independent session with StartSession method when using MobileCreateSignature method. If session-based procedure is \nneeded, MobileSign method should be used instead.   NB! Container formats DIGIDOC-XML 1.3 and BDOC 2.1 are supported. If an inappropriate combination of given format and version number is used \nin request parameters, a SOAP error object with error message \"  Invalid format and version combination! \" will be returned.", 
            "title": "MobileCreateSignature"
        }, 
        {
            "location": "/api/api_docs/#request_11", 
            "text": "Parameter    Type    R    Description        IDCode    String    +    Personal Identification Code of the userIt is recommended to use both input parameters  IDCode \nand PhoneNo! In case of Lithuanian Mobile-ID users IDCode and PhoneNo are mandatory.      SignersCountry    String(2)    -    Country of origin. ISO 3166-type 2-character country codes are used (e.g.  EE )      PhoneNo    String    +    User's phone number with country code in form +xxxxxxxxx (e.g. +3706234566). If both PhoneNo\nand IDCode parameters are given, correspondence between personal code and phone number is\nverified and in case of inconsistency SOAP error code 301 is returned. It is recommended to use\nboth input parameters IDCode and PhoneNo! In case of Lithuanian Mobile-ID users IDCode and\nPhoneNo are mandatory (see  Startig Mobile-ID operations ).\nIf the element \"PhoneNo\" has been set, the country\nattribute set in the prefix is used (independent on the value of the element \"SignersCountry\").      Language    String(3)    +    Language for user dialog in mobile phone. 3-character capitalized acronyms are used.\nPossible values:  ENG ,  EST ,  RUS .  LIT .      ServiceName    String(20)    +    Name of the service \u2013 previously agreed with Application Provider and DigiDocService operator.\nMaximum length \u2013 20 chars.      MessageToDisplay    String(40 bytes)    -    Text displayed in addition to ServiceName and before asking authentication PIN. Maximum\nlength is 40 bytes. In case of Latin letters, this means also a 40 character long text, but\nCyrillic characters may be encoded by two bytes and you will not be able to send more than\n20 symbols.      Role    String    -    Role or resolution of the signature      City    String    -    City where the signature is created      StateOrProvince    String    -    State or province where the signature is created      PostalCode    String    -    Postal code of the place where the signature is created      CountryName    String    -    Country where the signature is created      SigningProfile    String    -     LT_TM  (Long Term with Time Mark): a profile for BDOC-TM (a BDOC signature with time-mark)\n  and DDOC.  LT_TM  is currently the default option.  LT  (Long Term): Used for creating standard BDOC-TS signatures (BDOC with time-stamp / ASiC-E);\n  it is supported for the BDOC container format.       Datafiles    List    +    List of the files to be signed. Every element has following fields:      Parameter    R    Description        Id    +    unique identifier for the file. In case of DIGIDOC-XML format, the\nidentifiers of the data files start with \u201eD\" followed by a sequential\nnumber of the file.\nIn case of BDOC format a unique file name is transferred.      DigestType    +    hash algorithm identifier. In case of DIGIDOC-XML format the supported\ntype is \"sha1\". In cased of BDOC format, the recommended type is \"sha256\".      DigestValue    +    hash value of the data file in BASE64 encoding. In case of DIGIDOC-XML\nformat, hash is calculated over DigiDoc   element canonic form.\nPlease see  StartSession  how to calculate hash\nover data file and send it to\nthe service. For the BDOC form, hash is calculated over the binary datafile\ncontents and then is encoded in Base64.      MimeType    -    Type of the data file. In case of BDOC, the default\nvalue is  application/octet-stream .\nNote! In case of BDOC, it is very important that in the container the\nmanifest.xml file contains the same MimeType for this file.          Format    String    +    Format identifier for the signed file, shall equal to  \"DIGIDOC-XML\" and \"BDOC\".      Version    String    +    Format version of the undersigned file (In case of DIGIDOC-XML, the supported version is \"1.3\",\nin case of BDOC, it is \"2.1\").      SignatureID    String    +     Identifier of the signature. The Application Provider shall detect identifier of the\n  latest signature and increment this value by one. For example, if last signature has ID of\n  value \"S2\", the value of this parameter should be \"S3\".  In case the document has no signatures, the value should be \"S0\".       MessagingMode     +    Mode to be used to response for MobileCreateSignature query. Options are:   asynchClientServer  \u2013 Appliaction Provider will make repeated status queries.  asynchServerServer  \u2013 the response will be sent to the Application Provider\n  by DigiDocService. This requires Application Provider to provide interface for\n  recieving these asynchronous responses.       AsyncConfiguration    Integer    -    This parameter is required when using \"asynchServerServer\" messaging mode and identifies\nconfiguration mode. This value has to be previously agreed. Currently, Java Message Services  (JMS) interface is supported.", 
            "title": "Request"
        }, 
        {
            "location": "/api/api_docs/#response_19", 
            "text": "Parameter  Type  Description      Sesscode  Integer  Identificator of the active session    ChallengeID  String  4-character control code calculated on basis of  the Challenge value to be signed. This code is displayed on mobile phone's screen and shall be also displayed by Application Provider in order to ensure the user on authencity of the query.    Status  String  \u201eOK\" when no errors. In case of an error, SOAB error object is returned according to the specification in  SOAP Error Messages  of the current document.     If asynchClientServer messaging mode is used then GetMobileCreateSignatureStatus query shall be sent after getting a positive response.  NB! It is reasonable to wait ~10 seconds before starting sending status queries  - it is improbable that message from user's phone arrives earlier because of technical and human limitations. Mobile-ID transactions will time out in 4 minutes or less.  In case asynchServerServer messaging mode, a message will be sent to the Application Provider in accordance of previously agreed configuration. This XML message has a following structure:     Parameter  Type  Description      Sesscode  Integer  Identifier of the current active session    Status  String  Status code. \"SIGNATURE\" in case of successful signing. Other possible status codes are described in GetMobileSignatureStatus responses.    Data  String  The resulting   block in pure XML.", 
            "title": "Response"
        }, 
        {
            "location": "/api/api_docs/#getmobilecreatesignaturestatus", 
            "text": "The method is used to query status information when using asynchClientServer mobile signing mode.", 
            "title": "GetMobileCreateSignatureStatus"
        }, 
        {
            "location": "/api/api_docs/#request_12", 
            "text": "Parameter  Type  R  Description      Sesscode  Integer  +  Session identifier    WaitSignature  Boolean  +  If \"True\", the response is not returned to the request before the signature value has arrived from the phone or an error has occurred.  If \"False\", the response will be returned immediately and the Application provider has to repeat the request after some time (preferably in 2-10 seconds).", 
            "title": "Request"
        }, 
        {
            "location": "/api/api_docs/#response_20", 
            "text": "Parameter    Type    Description        Sesscode    Integer    Session identifier      Status    String    Process status:   REQUEST_OK  \u2013 the original message was successfully received;  EXPIRED_TRANSACTION  \u2013 service timed out before user managed to complete the signing;  USER_CANCEL  \u2013 user cancelled the action;  SIGNATURE  \u2013 signature was successfully created;  OUTSTANDING_TRANSACTION  \u2013 authentication is still on the way, the status query shall be repeated;  MID_NOT_READY  \u2013 the Mobile-ID of the SIM is not yet ready for the operations;  PHONE_ABSENT  \u2013 phone is switched off or out of coverage;  SENDING_ERROR  \u2013 other error when sending message (phone is incapable of receiving the\n  message, error in messaging server etc.);  SIM_ERROR  \u2013 SIM application error;  NOT_VALID  -  signature is not valid  REVOKED_CERTIFICATE  \u2013 certificate revoked  INTERNAL_ERROR  \u2013 technical error.       Signature    String    Signature value in PKCS#1 container in BASE64 encoding. Can be either an RSA or ECDSA signature,\ndepending on the signer's certificate returned with the signature block.      Is the value in Status field is not OUTSTANDING_TRANSACTION then active session is closed after this request.", 
            "title": "Response:"
        }, 
        {
            "location": "/api/api_docs/#getmobilecertificate", 
            "text": "The method is used to request user's certificates.   NB!  The usage of this method is limited (IP-address based access).  It is necessary to request the separate access from SK with clear argument why it is needed.", 
            "title": "GetMobileCertificate"
        }, 
        {
            "location": "/api/api_docs/#request_13", 
            "text": "Parameter    Type    R    Description        IDCode    String    +    Personal Identification Code of the user      Country    String(2)    -    Country of origin. ISO 3166-type 2-character country codes are used (e.g. EE)      PhoneNo    String    +    User's phone number with country code in form +xxxxxxxxx (e.g. +3706234566). If both PhoneNo\nand IDCode parameters are given, correspondence between personal code and phone number is\nverified and in case of inconsistency SOAP error code 301 is returned. If the element \"PhoneNo\"\nhas been set, the country attribute set in the prefix is used (independent on the value of the\nelement \"Country\").      ReturnCertData    String    +    Determines whether and which certificate(s) to return in the response (status info is\nreturned in any case):   auth  \u2013 request for default authentication certificate;  authRSA  \u2013 request for authentication RSA certificate, if available;  authECC  \u2013 request for authentication ECC certificate, if available;  sign  \u2013 request for default certificate for digital signing;  signRSA  \u2013 request for RSA certificate for digital signing, if available; signECC \u2013 request\n  for ECC certificate for digital signing, if available;  both  \u2013 request for both (authentication and digital signing) default certificates;  bothRSA  \u2013 both RSA certificates; \"bothECC\" \u2013 both ECC certificates;  \"none  \u2013 none.", 
            "title": "Request"
        }, 
        {
            "location": "/api/api_docs/#response_21", 
            "text": "Parameter  Type  Description      AuthCertStatus  String  OK \u2013 the authentication certificate has not expired. Note that the certificate may still be inactive for other reasons (it may be revoked by its owner).REVOKED \u2013 certificate has expired. The application provider may additionally ask for definitive certificate status by using an OCSP service (for example using the \"CheckCertificate\" operation).    SignCertStatus  String  OK \u2013 the signing certificate has not expired. Note that the certificate may still be inactive for other reasons (it may be revoked by its owner).REVOKED \u2013 certificate has expired. The application provider may additionally ask for definitive certificate status by using an OCSP service (for example using the \"CheckCertificate\" operation).    AuthCertData  String  Authentication certificate in PEM form    SignCertData  String  Digital signing certificate in PEM form     If the user does not possess Mobile-ID SIM, SOAP fault is returned in accordance with p 9.4.", 
            "title": "Response"
        }, 
        {
            "location": "/api/api_docs/#mobilesignhash", 
            "text": "This operation starts the process of signing a hash using Mobile-ID. It is meant for signing document formats other than DDOC and BDOC (for example: PDF, ADOC, etc.) For BDOC and DDOC formats, it is recommended to use the MobileCreateSignature and MobileSign operations.  If it is necessary to fetch signer's certificate before signing (for example, to incorporate the certificate in the document prior to signing), the GetMobileCertificate operation can be used.  This operation locates the signer's certificate and sends the signing request to the signer's mobile device (since 3.10 MobileSignHash doesn't request for OCSP). An active session is not required.  The status of the hash signing process is checked in ClientServer mode with the GetMobileSignHashStatusV2 operation. Note! Before sending the first status request, it is recommended to wait at least 10 seconds, as the signing process cannot finish faster due to human and technology factors. Mobile-ID transactions will time out in 4 minutes or less.  This operation is using the document/literal style and is accessible from  https://digidocservice.sk.ee/v2/mid.wsdl .  New version of the service uses a separate WSDL, and error message format has been updated (see  SOAP Error messages ).   NOTE : The usage of this method is limited (IP-address based access).  It is necessary to request the separate access permissions for using it.", 
            "title": "MobileSignHash"
        }, 
        {
            "location": "/api/api_docs/#request_14", 
            "text": "Parameter  Type  R  Description      IDCode  String  +  Personal Identification Code of the user    PhoneNo  String  +  Phone number of the certificate number complete with the country code in the form +xxxxxxxxx (e.g. +3706234566).A match between the phone number and the ID-code will be checked and in case on non-compliance a SOAP error code 301 will be returned,    Language  String(3)  +  Language of the messages displayed on user's phone. ISO 3166 3-letter codes are being used. Possible values are: EST, ENG, LIT and RUS.    MessageToDisplay  String(40)  -  Text displayed in addition to ServiceName and before asking authentication PIN. Maximum length is 40 bytes. In case of Latin letters, this means also a 40 character long text, but Cyrillic characters may be encoded by two bytes and you will not be able to send more than 20 symbols.    ServiceName  String(20)  +  Name of the service \u2013 previously agreed with Application Provider and DigiDocService operator. Maximum length \u2013 20 chars.    Hash  String(128)  +  A hash to be signed. Transferred as a HEX string.    HashType  Enumeration  +  A hash type to be signed. SHA1, SHA256 and SHA512 hashes are currently supported.    KeyID  String  -  Key type used for signing. RSA and ECC keys are currently supported.", 
            "title": "Request"
        }, 
        {
            "location": "/api/api_docs/#response_22", 
            "text": "Parameter  Type  Description      Sesscode  String  Identifier of the session.    ChallengeID  String  - 4 (number) character control code, which is calculated on a basis of Challenge value that will be sent to the user's phone for signing.- 40 characters long HEX i.e. hash Challenge to be signed. Will be used only in case of Bite MSSP operator.This control code shall be displayed to the user by the application; with this it will be possible for the user to prove the authenticity of the request.NOTE: Application must prompt the user to check the compatibility of the control code displayed in the application and on the phone screen.    Status  String  \"OK\" if the procedure was performed successfully. If method call-up will result with an error, a SOAP error object will be returned.     If method call-up will result with an error, a SOAP error object will be returned according to the description in  SOAP Error messages .", 
            "title": "Response"
        }, 
        {
            "location": "/api/api_docs/#getmobilesignhashstatusrequest", 
            "text": "The method is used to query status information when using asynchClientServer mobile signing mode.  This operation returns the status of the hash signing operation and, in the case of successful signing, the signature, signer's certificate and revocation data about the certificate.", 
            "title": "GetMobileSignHashStatusRequest"
        }, 
        {
            "location": "/api/api_docs/#request_15", 
            "text": "Parameter  Type  R  Description      Sesscode  String(20)  +  Identifier of the session.    WaitSignature  Boolean  -  If \"True\", the response is not returned to the request before the signature value has arrived from the phone or an error has occurred.  If \"False\", the response will be returned immediately and the Application provider has to repeat the request after some time (preferably in 2-10 seconds).", 
            "title": "Request"
        }, 
        {
            "location": "/api/api_docs/#response_23", 
            "text": "Parameter    Type    Description        Sesscode    String    Identifier of the session.      Status    String    Process status:   OUTSTANDING_TRANSACTION  \u2013 authentication is still on the way, the status  SIGNATURE  \u2013 signature was successfully created;  NOT_VALID  \u2013 the action is completed but the signature created is not valid;  EXPIRED_TRANSACTION  \u2013 service timed out before user managed to complete the signing;  USER_CANCEL  \u2013 user cancelled the action;  query shall be repeated;  MID_NOT_READY  \u2013 the Mobile-ID of the SIM is not yet ready for the operations;  PHONE_ABSENT  \u2013 phone is switched off or out of coverage;  SENDING_ERROR  \u2013 other error when sending message (phone is incapable of\n  receiving the message, error in messaging server etc.);  SIM_ERROR  \u2013 SIM application error;  INTERNAL_ERROR  \u2013 technical error  REVOKED_CERTIFICATE  \u2013 certificate revoked or suspended  OCSP UNAUTHORIZED  - the client who is using the service does not have\n  access to validity confirmation service of OCSP used by DigiDocService.       Signature    String    Signed hash in a PKC1 / PKCS13 container. (Will be returned\nonly if Status ==  SIGNATURE ). Can be either a RSA or an ECDSA signature, depending\non the returned certificate in the \"CertificateData\" field.      RevocationData    String    Validity information of the certificate (PEM format)      CertificateData    String    Certificate in PEM format, encoded in Base64.      If method call-up will result with an error, a SOAP error object will be returned according to the description in  SOAP Error messages .", 
            "title": "Response"
        }, 
        {
            "location": "/api/api_docs/#data-structures", 
            "text": "NB!  When sending requests, special characters in XML element value must be escaped!        Special character  Convert to      \"  quot;    '  apos;     lt;     gt;     amp;", 
            "title": "Data structures"
        }, 
        {
            "location": "/api/api_docs/#signeddocinfo", 
            "text": "Presents the structure of a DigiDoc file (container).   Format  \u2013 File format for the signed container (DIGIDOC-XML and BDOC are supported currently).  Version  - The version of a signed file format (in case of DIGIDOC-XML the \n  versions 1.1, 1.2, 1.3; in case of BDOC the version 2.1).  DataFileInfo \u2013  Information about the files in container. The data structure is described in  DataFileInfo  in the current \n  document. A DataFileInfo section may appear 0..n times in an SignedDocInfo section, depending on the number of data files.  SignatureInfo  \u2013 Contains the info of the signatures in the signed file. This section may appear 0..n times depending on the number of signatures. Contains the following attributes:  Id \u2013  The unique signature's identifier within the current document/transaction. Signatures' identifiers begin with \u201eS\" and the signature's sequence number is followed.  Status  \u2013 Signature's status information. A signature will be valid, if the value of the attribute is \u201eOK\". If a signature is invalid, the value \n  of the attribute will be \u201eError\" and more precise error information is presented in the Error-element. If the signature is valid, but doesn't completely \n  correspond to the container's specification, the value of this element is \"OK\", while the Error-element has a description of the warning returned by the DigiDoc library.  Error  \u2013 Contains the error information discovered during the signature validation check. Contains following attributes:  code  \u2013 Error code;  category\u2013  Error category. There are 3 error categories:  TECHNICAL  \u2013 technical issue;  USER  \u2013 issue caused by user;  LIBRARY  \u2013 internal error of the DigiDoc library.  WARNING  \u2013 A warning from the DigiDoc library. Legally, the signature is valid, but additional changes are not allowed in the container. For more information, see  Container validation .    description \u2013  Error description in English.    SigningTime  \u2013 Local time (for example, time of the signer's computer, time of signing web server) of signing according to the \"\n  The W3C note  Date and Time Formats\"  [5]. NB! This is not the official time of signing. The official time is defined for DDOC and BDOC-TM in current structure\n  element  Confirmation-  ProducedAt  and for BDOC-TS/ASiC-E in current structure element  Timestamps-  CreationTime .  SignerRole  - The role or resolution marked by the signer at signing. Assigned by following attributes:  Certified  - Defines, whether the role has been assigned by the signer itself or by the CA. Only user-defined roles are in use currently, where the parameter value is 0.  Role  - The text of the role or resolution.    SignatureProductionPlace  - The data, belonging to signature's attributes, describes the place of signing. Those fields are not required in signing.  City  \u2013 Name of the city, where it's signed.  StateOrProvince  \u2013 Name of the state/province, where it's signed.  PostalCode  \u2013 Postal code of the signing location.  CountryName  \u2013 Name of the country, where it's signed.    Signer  \u2013 Information about the signer including the following attributes:  CommonName  \u2013 Name of the signer, taken from the signer certificate's Subject field's CN parameter.  IDCode  \u2013Identification number of the signer, taken from the signer certificate's Subject field's Serial Number parameter.  Certificate  \u2013 Main information of the certificate used for signing according to the current document's  CertificateInfo .    Confirmation \u2013  OCSP validity confirmation's data structure. Every correct and valid signature contains a structure of a validity confirmation. Confirmation section contains the following attributes:  ResponderID  \u2013 Distinguish name of the OCSP validity confirmation server (OCSP Responder ID)  ProducedAt  \u2013 Validity Confirmation obtaining time according to the \"The W3C note  Date and Time Formats\"  [5] (f.e._\"_09.14T21:00:00Z\"). This time is counted as the official signing time.  Responder Certificate  - Certificate of the validity confirmation service (OCSP) server according to the format described in current document  CertificateInfo .    Timestamps \u2013  Information about the RFC3161 timestamps that are related to the signature. It will be outputted only in case of BDOC-TS/ASiC-E containers. Timestamps section contains the following attributes:  Id  \u2013 Currently not included.  Type  - The type of the timestamp. The value for signature's timestamp is always  SIGNATURE\\_TIMESTAMP .  SerialNumber  - Currently not included.  CreationTime  - the generation time of the the signature's timestamp (f.e. \"2014-11-11T15:00:00Z\").  Policy  - Currently not included.  Errorbound  - Currently not included.  Ordered  - Currently it is always set to \"false\".  TSA  - Currently not included.  Certificate  - Main information of the certificate used for signing the timestamp according to the current document's  CertificateInfo .    CRLInfo  - Information about signature related revocation list.  The revocation revocation list related functionality is not realized in the service version.", 
            "title": "SignedDocInfo"
        }, 
        {
            "location": "/api/api_docs/#sample-of-structure", 
            "text": "SignedDocInfo xsi:type= d:SignedDocInfo \n     format xsi:type= xsd:string /format \n     version xsi:type= xsd:string /version \n     DataFileInfo xsi:type= d:DataFileInfo \n         Id xsi:type= xsd:string /Id \n         Filename xsi:type= xsd:string /Filename \n         MimeType xsi:type= xsd:string /MimeType \n         ContentType xsi:type= xsd:string /ContentType \n         Size xsi:type= xsd:int 0 /Size \n         DigestType xsi:type= xsd:string /DigestType \n         DigestValue xsi:type= xsd:string /DigestValue \n     /DataFileInfo \n     SignatureInfo xsi:type= d:SignatureInfo \n         Id xsi:type= xsd:string /Id \n         Status xsi:type= xsd:string /Status \n         Error xsi:type= d:Error \n             code xsi:type= xsd:int 0 /code \n             category xsi:type= xsd:string /category \n             description xsi:type= xsd:string /description \n         /Error \n         SigningTime xsi:type= xsd:string /SigningTime \n         SignerRole xsi:type= d:SignerRole \n             certified xsi:type= xsd:int 0 /certified \n             Role xsi:type= xsd:string /Role \n         /SignerRole \n         SignatureProductionPlace si:type= d:SignatureProductionPlace \n             City xsi:type= xsd:string /City \n             StateOrProvince xsi:type= xsd:string /StateOrProvince \n             PostalCode xsi:type= xsd:string /PostalCode \n             CountryName xsi:type= xsd:string /CountryName \n         /SignatureProductionPlace \n         Signer xsi:type= d:SignerInfo \n             CommonName xsi:type= xsd:string /CommonName \n             IDCode xsi:type= xsd:string /IDCode \n             Certificate xsi:type= d:CertificateInfo \n                 Issuer xsi:type= xsd:string /Issuer \n                 Subject xsi:type= xsd:string /Subject \n                 ValidFrom xsi:type= xsd:string /ValidFrom \n                 ValidTo xsi:type= xsd:string /ValidTo \n                 IssuerSerial xsi:type= xsd:string /IssuerSerial \n                 Policies xsi:type= d:CertificatePolicy \n                     OID xsi:type= xsd:string /OID \n                     URL xsi:type= xsd:string /URL \n                     Description xsi:type= xsd:string /Description \n                 /Policies \n             /Certificate \n         /Signer \n         Confirmation xsi:type= d:ConfirmationInfo \n             ResponderID xsi:type= xsd:string /ResponderID \n             ProducedAt xsi:type= xsd:string /ProducedAt \n             ResponderCertificate xsi:type= d:CertificateInfo \n                 Issuer xsi:type= xsd:string /Issuer \n                 Subject xsi:type= xsd:string /Subject \n                 ValidFrom xsi:type= xsd:string /ValidFrom \n                 ValidTo xsi:type= xsd:string /ValidTo \n                 IssuerSerial xsi:type= xsd:string /IssuerSerial \n                 Policies xsi:type= d:CertificatePolicy \n                     OID xsi:type= xsd:string /OID \n                     URL xsi:type= xsd:string /URL \n                 Description xsi:type= xsd:string /Description \n                 /Policies \n             /ResponderCertificate \n         /Confirmation \n     /SignatureInfo  /SignedDocInfo", 
            "title": "Sample of structure"
        }, 
        {
            "location": "/api/api_docs/#certificateinfo", 
            "text": "Data structure which includes the main fields of the certificate. Used for describing the information of the certificate of the signer and the information of the certificate of the validity confirmation.  Contains the following attributes:   Issuer  \u2013 The distinguished name of the certificate issuer.  IssuerSerial  \u2013 The certificate's serial number.  Subject  \u2013 The distinguished name of the certificate.  ValidForm  \u2013 The certificate's period of validity according to The W3C note  Date and Time Formats  _[5] (for example \"_09.14T21:00:00Z\").  ValidTo  \u2013 The expiration time of the certificate according to The W3C note  Date and Time Formats   [5]  Policies  \u2013 Structure of signing policies, may appear 0..n times.  OID  \u2013 The unique identifier of signing policies.  URL  - The reference to signing policies (used on company certificates primly).  Description  - A short description of signing policies.", 
            "title": "CertificateInfo"
        }, 
        {
            "location": "/api/api_docs/#sample-of-structure_1", 
            "text": "Certificate xsi:type= d:CertificateInfo \n     Issuer xsi:type= xsd:string /emailAddress=pki@sk.ee/C=EE/O=AS Sertifitseerimiskeskus/OU=ESTEID/SN=1/CN=ESTEID-SK /Issuer \n     Subject xsi:type= xsd:string /C=EE/O=ESTEID/OU=digital signature/CN=KESKEL,URMO,38002240232/SN=KESKEL/GN=URMO/serialNumber=38002240232 /Subject \n     ValidFrom xsi:type= xsd:string 2005.03.18T22:00:00Z /ValidFrom \n     ValidTo xsi:type= xsd:string 2008.03.22T22:00:00Z /ValidTo \n     IssuerSerial xsi:type= xsd:string 1111128454 /IssuerSerial \n     Policies xsi:type= d:CertificatePolicy \n         OID xsi:type= xsd:string 1.3.6.1.4.1.10015.1.1.1.1 /OID \n         URL xsi:type= xsd:string http://www.sk.ee/cps/ /URL \n         Description xsi:type= xsd:string none /Description \n     /Policies  /Certificate", 
            "title": "Sample of structure"
        }, 
        {
            "location": "/api/api_docs/#datafileinfo", 
            "text": "The given data structure describes the information of the data file(s) inside DigiDoc. The structure may contain a data file in Base64 format or just a hash of the data file depending on the value of the ContentType attribute.   Id  \u2013unique identifier of a file. In case of DIGIDOC-XML format, the data file identifiers start with a symbol \u201eD\" followed by the file's sequence number. In case of BDOC format the identifier is the file name, which must be unique. Within a StartSession request the given attribute is not valued and an empty string is sent/forwarded.  Filename  \u2013 A name of the data file without a path.  ContentType  \u2013 Data file's content type (HASHCODE, EMBEDDED_BASE64)  HASHCODE  \u2013 To service is sent the hashcode* only not the entire data file's content. The method how to calculate the hashcode is described in parameter  DigestType  and the hashcode itself is in parameter  DigestValue .  EMBEDDED_BASE64  - The content of the file is in Base64 encoding in DfData attribute.    MimeType  \u2013 Mime type of datafile.  Size  \u2013 The actual size of file in bytes.  DigestType  - Hashcode type of the data file. In case of DIGIDOC-XML format the form currently supported algorithm is \"sha1\", in case of BDOC format the supported algorithm is \"sha256\". Required for HASHCODE content type only.  DigestValue  \u2013 The value of data file's hash* in Base64 encoding. Required for HASHCODE content type only.  DfData  - Data file content in Base64 encoding.   * See example, how to calculate hash over data file and send it to the service from  StartSession", 
            "title": "DataFileInfo"
        }, 
        {
            "location": "/api/api_docs/#soap-error-messages", 
            "text": "The SOAP error message contains error code in the   object and additional text in the   object.  A new structure of error objects is being used in the responses of the methods MobileSighHash and GetMobileSignHashStatus. The element   is   type of object that contains one   element with a message that explains the error message, and a zero or more   elements with detailed descriptions of the errror (please see the examples at the end of the chapter).  Error messages are grouped as follows :   100-199  \u2013 errors caused by user (Application Provider) of the service  200-299  \u2013 internal errors of the service  300-399  \u2013 errors caused by end user and his/her mobile phone", 
            "title": "SOAP Error Messages"
        }, 
        {
            "location": "/api/api_docs/#list-of-error-codes", 
            "text": "Error Code  Explanation      100  General error    101  Incorrect input parameters    102  Some of required input parameters are missing    103  Service provider does not have access to SK validity confirmation service (OCSP response UNAUTHORIZED)    200  General error of the service    201  Missing user certificate    202  Unable to verify certificate validity    203  Session is locked by the other SOAP request.    300  General error related to user's mobile phone    301  Not a Mobile-ID user    302  The certificate of the user is not valid (OCSP said: REVOKED)    303  Certificate is not activated or/and status of the certificate is unknown (OCSP said: UNKNOWN)    304  Certificates is suspended    305  Certificate is expired    413  Incoming message exceeds permitted volume limit.    503  The number of simultaneous requests of the service has been exceeded.", 
            "title": "List of error codes:"
        }, 
        {
            "location": "/api/api_docs/#example-1-of-the-service-error-message", 
            "text": "In the request (the first version service, old structure) the phone number format was incorrect or the country code of the phone number was not included in the list of supported country codes.  SOAP-ENV:Fault \n    faultcode SOAP-ENV:Client /faultcode \n    faultstring xml:lang= en 102 /faultstring \n    detail \n       message User IDcode and Phone number are mandatory /message \n    /detail  /SOAP-ENV:Fault", 
            "title": "Example 1 of the service error message"
        }, 
        {
            "location": "/api/api_docs/#example-2-of-the-service-error-message", 
            "text": "Several errors were identified in the request (the second version service, new structure).   Sequence of the request parameters was incorrect. Parameter \"IDCode\" was expected as the first one.  Phone number does not correspond to the expected type   SOAP-ENV:Fault \n    faultcode SOAP-ENV:Client /faultcode \n    faultstring xml:lang= en 101 /faultstring \n    detail \n       endpointError \n          message Request message validation failed /message \n          reason cvc-complex-type.2.4.a: Invalid content was found starting with element 'MessageToDisplay'. One of '{IDCode}' is expected. /reason \n          reason cvc-minLength-valid: Value '' with length = '0' is not facet-valid with respect to minLength '5' for type 'PhoneNumberType'. /reason \n          reason cvc-type.3.1.3: The value '' of element 'PhoneNo' is not valid. /reason \n       /endpointError \n    /detail  /SOAP-ENV:Fault", 
            "title": "Example 2 of the service error message"
        }, 
        {
            "location": "/api/api_docs/#container-validation", 
            "text": "When an existing container is sent to DigiDocService, the document is automatically validated. Starting from JDigiDoc library version 3.8 certain technical errors are allowed in the container for compatibility reasons. Such errors are reported as warnings.  When a container has warnings, the signatures are considered legally valid (and thus the status of these signatures is \"OK\", even though an \"Error\" element is also present). For some warnings, further modifications to the document are not allowed (adding and removing signatures is not permitted). The following errors are considered warnings:   129 WARN_WEAK_DIGEST \u2013 the container uses a weak hash algorithm (e.g., SHA-1). Adding new signatures is not allowed.  173 ERR_DF_INV_HASH_GOOD_ALT_HASH \u2013 the XML DataFile element is missing a namespace attribute. Adding signatures is not allowed.  176 ERR_ISSUER_XMLNS \u2013 The XML elements X509IssuerName and/or X509SerialNumber are lacking namespace attributes.  177 ERR_OLD_VER \u2013 The container version is not supported anymore. Adding signatures is not allowed.   For more information about warnings, please refer to the JDigiDoc library documentation:  http://www.id.ee/public/SK-JDD-PRG-GUIDE.pdf  , chapter \"Validation status VALID WITH WARNINGS\".  The warnings are only visible in responses under the SignatureInfo elements. The Status element under SignatureInfo has the value \"OK\", but there is also an \"Error\" element present, whose category is set to \"WARNING\". The warning is specified in the \"Code\" and \"Description\" elements.", 
            "title": "Container validation"
        }
    ]
}